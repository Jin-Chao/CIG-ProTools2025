--------------------------------------------------------------------------------
-- Metadata
--------------------------------------------------------------------------------
Invocation:       /home/uqcjin/bin/valgrind/bin/cu_annotate cacheusage.d1.out.42111
I1 cache:         32768 B, 64 B, 8-way associative
D1 cache:         49152 B, 64 B, 12-way associative
LL cache:         62914560 B, 64 B, 15-way associative
WordSize:         4
Command:          ./Himeno/bin/bmt_pad.O3 -s M -l 10 -v varinfo.txt
Histogram bins recorded:  Access# Miss# Comp# Conf# Cap# Cacheline# 1-words 2-words 3-words 4-words 5-words 6-words 7-words 8-words 9-words 10-words 11-words 12-words 13-words 14-words 15-words 16-words
Bins shown:     Access# Miss# Comp# Conf# Cap# Cacheline# 1-words 2-words 3-words 4-words 5-words 6-words 7-words 8-words 9-words 10-words 11-words 12-words 13-words 14-words 15-words 16-words
Bin sort order: Access# Miss# Comp# Conf# Cap# Cacheline# 1-words 2-words 3-words 4-words 5-words 6-words 7-words 8-words 9-words 10-words 11-words 12-words 13-words 14-words 15-words 16-words
Threshold:        0.1%
Annotation:       on

--------------------------------------------------------------------------------
-- Summary
--------------------------------------------------------------------------------
Access#_______ Miss#____ Comp#__ Conf#___ Cap#____ Cacheline# 1-words 2-words 3-words 4-words 5-words 6-words 7-words 8-words 9-words 10-words 11-words 12-words 13-words 14-words 15-words 16-words 

          3.5% 73,701,142 (100.0%)  (5.0%)  (14.1%)  (80.9%)          28/0  (0.2%)  (0.3%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (4.7%)  (0.0%)  (94.7%)  PROGRAM TOTALS

--------------------------------------------------------------------------------
-- File:function summary
--------------------------------------------------------------------------------
  Access#_______ Miss#____ Comp#__ Conf#___ Cap#____ Cacheline# 1-words 2-words 3-words 4-words 5-words 6-words 7-words 8-words 9-words 10-words 11-words 12-words 13-words 14-words 15-words 16-words  file:function

<           3.5% 73,695,110 (100.0%)  (5.0%)  (14.1%)  (80.9%)          28/0  (0.2%)  (0.3%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (4.7%)  (0.0%)  (94.7%)  /scratch/user/uqcjin/App/examples/Himeno/src/../../Himeno/src/himenoBMTxpa_pad.c:
            3.4% 70,023,114  (95.0%)  (0.0%)  (14.9%)  (85.1%)          29/0  (0.2%)  (0.3%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (5.0%)  (0.0%)  (94.4%)    jacobi._omp_fn.0
           25.0%  3,409,575   (4.6%)  (100.0%)   (0.0%)   (0.0%)           3/0  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (99.9%)    mat_set


--------------------------------------------------------------------------------
-- Function:file summary
--------------------------------------------------------------------------------
  Access#_______ Miss#___ Comp#__ Conf#___ Cap#____ Cacheline# 1-words 2-words 3-words 4-words 5-words 6-words 7-words 8-words 9-words 10-words 11-words 12-words 13-words 14-words 15-words 16-words  function:file

>           3.4% 70,023,114 (95.0%)  (0.0%)  (14.9%)  (85.1%)          29/0  (0.2%)  (0.3%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (5.0%)  (0.0%)  (94.4%)  jacobi._omp_fn.0:/scratch/user/uqcjin/App/examples/Himeno/src/../../Himeno/src/himenoBMTxpa_pad.c


>          25.0%  3,409,575  (4.6%)  (100.0%)   (0.0%)   (0.0%)           3/0  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (99.9%)  mat_set:/scratch/user/uqcjin/App/examples/Himeno/src/../../Himeno/src/himenoBMTxpa_pad.c


--------------------------------------------------------------------------------
-- Annotated source file: /scratch/user/uqcjin/App/examples/Himeno/src/../../Himeno/src/himenoBMTxpa_pad.c
--------------------------------------------------------------------------------
Access#_______ Miss#___ Comp#___ Conf#___ Cap#____ Cacheline# 1-words 2-words 3-words 4-words 5-words 6-words 7-words 8-words 9-words 10-words 11-words 12-words 13-words 14-words 15-words 16-words 

-- line 192 ----------------------------------------
             .         .                                                .                                                                                                                                       varinfo_file_print(getName(b2), &MR((&b2), 0, 0, 0, 0), &MR((&b2), 0, imax-1, jmax-1, kmax-1));
             .         .                                                .                                                                                                                                       varinfo_file_print(getName(c0), &MR((&c0), 0, 0, 0, 0), &MR((&c0), 0, imax-1, jmax-1, kmax-1));
             .         .                                                .                                                                                                                                       varinfo_file_print(getName(c1), &MR((&c1), 0, 0, 0, 0), &MR((&c1), 0, imax-1, jmax-1, kmax-1));
             .         .                                                .                                                                                                                                       varinfo_file_print(getName(c2), &MR((&c2), 0, 0, 0, 0), &MR((&c2), 0, imax-1, jmax-1, kmax-1));
             .         .                                                .                                                                                                                                       varinfo_file_close();
             .         .                                                .                                                                                                                                     }
             .         .                                                .                                                                                                                                    
             .         .                                                .                                                                                                                                     mat_set_init(&p);
         50.0%         1  (0.0%)   (0.0%)   (0.0%)  (100.0%)           2/1  (100.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)   (0.0%)    mat_set(&bnd,0,1.0);
             .         .                                                .                                                                                                                                     mat_set(&wrk1,0,0.0);
             .         .                                                .                                                                                                                                     mat_set(&wrk2,0,0.0);
             .         .                                                .                                                                                                                                     mat_set(&a0,0,1.0);
             .         .                                                .                                                                                                                                     mat_set(&a1,0,1.0);
             .         .                                                .                                                                                                                                     mat_set(&a2,0,1.0);
         50.0%         1  (0.0%)   (0.0%)   (0.0%)  (100.0%)           2/1  (100.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)   (0.0%)    mat_set(&a3,0,1.0/6.0);
             .         .                                                .                                                                                                                                     mat_set(&b0,0,0.0);
             .         .                                                .                                                                                                                                     mat_set(&b1,0,0.0);
             .         .                                                .                                                                                                                                     mat_set(&b2,0,0.0);
             .         .                                                .                                                                                                                                     mat_set(&c0,0,1.0);
             .         .                                                .                                                                                                                                     mat_set(&c1,0,1.0);
             .         .                                                .                                                                                                                                     mat_set(&c2,0,1.0);
             .         .                                                .                                                                                                                                   
             .         .                                                .                                                                                                                                     omp_set_num_threads(num_threads);
-- line 214 ----------------------------------------
-- line 217 ----------------------------------------
             .         .                                                .                                                                                                                                      *    Start measuring
             .         .                                                .                                                                                                                                      */
             .         .                                                .                                                                                                                                     nn= 3;
             .         .                                                .                                                                                                                                     printf(" Start rehearsal measurement process.\n");
             .         .                                                .                                                                                                                                     printf(" Measure the performance in %d times.\n\n",nn);
             .         .                                                .                                                                                                                                   
             .         .                                                .                                                                                                                                     cpu0= second();
             .         .                                                .                                                                                                                                   //  gosa= jacobi(nn,&a,&b,&c,&p,&bnd,&wrk1,&wrk2);
          8.3%         1  (0.0%)   (0.0%)   (0.0%)  (100.0%)          12/3  (0.0%)  (0.0%)  (100.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)   (0.0%)    gosa= jacobi(nn,&a0,&a1,&a2,&a3,&b0,&b1,&b2,&c0,&c1,&c2,&p,&bnd,&wrk1,&wrk2);
        100.0%         1  (0.0%)   (0.0%)   (0.0%)  (100.0%)           1/0  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (100.0%)  (0.0%)   (0.0%)    cpu1= second();
             .         .                                                .                                                                                                                                     cpu= cpu1 - cpu0;
             .         .                                                .                                                                                                                                     flop = (double)(kmax-1)*(double)(jmax-1)*(double)(imax-1)*34.0;
             .         .                                                .                                                                                                                                   
             .         .                                                .                                                                                                                                     if(cpu != 0.0)
             .         .                                                .                                                                                                                                       xmflops2= flop/cpu*1.e-6*nn;
             .         .                                                .                                                                                                                                   
             .         .                                                .                                                                                                                                     printf(" MFLOPS: %f time(s): %f %e\n\n",xmflops2,cpu,gosa);
             .         .                                                .                                                                                                                                   
-- line 234 ----------------------------------------
-- line 286 ----------------------------------------
             .         .                                                .                                                                                                                                       return true;
             .         .                                                .                                                                                                                                     }
             .         .                                                .                                                                                                                                     if(!strcmp(size,"S") || !strcmp(size,"s")){
             .         .                                                .                                                                                                                                       is[0]= 64;
             .         .                                                .                                                                                                                                       is[1]= 64;
             .         .                                                .                                                                                                                                       is[2]= 128;
             .         .                                                .                                                                                                                                       return true;
             .         .                                                .                                                                                                                                     }
         50.0%         1  (0.0%)  (100.0%)   (0.0%)   (0.0%)           2/2  (0.0%)  (100.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)   (0.0%)    if(!strcmp(size,"M") || !strcmp(size,"m")){
             .         .                                                .                                                                                                                                       is[0]= 128;
             .         .                                                .                                                                                                                                       is[1]= 128;
             .         .                                                .                                                                                                                                       is[2]= 256;
             .         .                                                .                                                                                                                                       return true;
             .         .                                                .                                                                                                                                     }
             .         .                                                .                                                                                                                                     if(!strcmp(size,"L") || !strcmp(size,"l")){
             .         .                                                .                                                                                                                                       is[0]= 256;
             .         .                                                .                                                                                                                                       is[1]= 256;
-- line 302 ----------------------------------------
-- line 310 ----------------------------------------
             .         .                                                .                                                                                                                                       return true;
             .         .                                                .                                                                                                                                     }
             .         .                                                .                                                                                                                                     return false;
             .         .                                                .                                                                                                                                   }
             .         .                                                .                                                                                                                                   
             .         .                                                .                                                                                                                                   int
             .         .                                                .                                                                                                                                   newMat(Matrix* Mat, int mnums,int mrows, int mcols, int mdeps, int pad)
             .         .                                                .                                                                                                                                   {
         21.4%         3  (0.0%)  (66.7%)   (0.0%)  (33.3%)           4/2  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (33.3%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (66.7%)    Mat->mnums= mnums;
         35.7%         5  (0.0%)  (100.0%)   (0.0%)   (0.0%)           2/0  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (20.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (80.0%)    Mat->mrows= mrows;
             .         .                                                .                                                                                                                                     Mat->mcols= mcols;
             .         .                                                .                                                                                                                                     Mat->mdeps= mdeps;
             .         .                                                .                                                                                                                                     Mat->buffer= NULL;
             .         .                                                .                                                                                                                                     Mat->buffer= (float*) 
             .         .                                                .                                                                                                                                       malloc((mnums * mrows * mcols * mdeps + pad) * sizeof(float));
             .         .                                                .                                                                                                                                     
             .         .                                                .                                                                                                                                     Mat->m = Mat->buffer + pad;
             .         .                                                .                                                                                                                                   
-- line 327 ----------------------------------------
-- line 341 ----------------------------------------
             .         .                                                .                                                                                                                                     Mat->mdeps= 0;
             .         .                                                .                                                                                                                                   }
             .         .                                                .                                                                                                                                   
             .         .                                                .                                                                                                                                   void
             .         .                                                .                                                                                                                                   mat_set(Matrix* Mat, int l, float val)
             .         .                                                .                                                                                                                                   {
             .         .                                                .                                                                                                                                     int i,j,k;
             .         .                                                .                                                                                                                                   
        100.0%     1,677  (0.0%)   (0.0%)   (0.0%)  (100.0%)           1/1  (98.4%)  (0.0%)  (0.7%)  (0.0%)  (0.8%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)   (0.1%)      for(i=0; i<Mat->mrows; i++)
             .         .                                                .                                                                                                                                         for(j=0; j<Mat->mcols; j++)
             .         .                                                .                                                                                                                                           for(k=0; k<Mat->mdeps; k++)
         25.0% 3,407,885  (4.6%)  (100.0%)   (0.0%)   (0.0%)           3/0  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (100.0%)            MR(Mat,l,i,j,k)= val;
         14.3%        13  (0.0%)   (0.0%)   (0.0%)  (100.0%)           7/0  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (92.3%)  (0.0%)  (7.7%)  (0.0%)   (0.0%)  }
             .         .                                                .                                                                                                                                   
             .         .                                                .                                                                                                                                   void
             .         .                                                .                                                                                                                                   mat_set_init(Matrix* Mat)
             .         .                                                .                                                                                                                                   {
             .         .                                                .                                                                                                                                     int  i,j,k,l;
             .         .                                                .                                                                                                                                     float tt;
             .         .                                                .                                                                                                                                   
             .         .                                                .                                                                                                                                     for(i=0; i<Mat->mrows; i++)
         99.2%       128  (0.0%)   (0.0%)   (0.0%)  (100.0%)           1/4  (0.0%)  (0.0%)  (0.0%)  (100.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)   (0.0%)      for(j=0; j<Mat->mcols; j++)
             .         .                                                .                                                                                                                                         for(k=0; k<Mat->mdeps; k++)
         25.0%   262,272  (0.4%)  (100.0%)   (0.0%)   (0.0%)           3/0  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (100.0%)          MR(Mat,0,i,j,k)= (float)(i*i)
             .         .                                                .                                                                                                                                             /(float)((Mat->mrows - 1)*(Mat->mrows - 1));
         14.3%         1  (0.0%)   (0.0%)   (0.0%)  (100.0%)           7/0  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (100.0%)  (0.0%)  (0.0%)  (0.0%)   (0.0%)  }
             .         .                                                .                                                                                                                                   
             .         .                                                .                                                                                                                                   float
             .         .                                                .                                                                                                                                   jacobi(int nn, Matrix* a0, Matrix* a1, Matrix* a2, Matrix* a3, Matrix* b0, Matrix* b1, Matrix*b2, Matrix* c0, Matrix*c1, Matrix*c2,
             .         .                                                .                                                                                                                                          Matrix* p,Matrix* bnd,Matrix* wrk1,Matrix* wrk2)
             .         .                                                .                                                                                                                                   {
             .         .                                                .                                                                                                                                     int    i,j,k,n,imax,jmax,kmax;
             .         .                                                .                                                                                                                                     float  gosa,gosa1,s0,ss;
             .         .                                                .                                                                                                                                   
        100.0%         2  (0.0%)   (0.0%)   (0.0%)  (100.0%)           1/0  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (100.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)   (0.0%)    imax= p->mrows-1;
             .         .                                                .                                                                                                                                     jmax= p->mcols-1;
             .         .                                                .                                                                                                                                     kmax= p->mdeps-1;
          4.3%         4  (0.0%)   (0.0%)   (0.0%)  (200.0%)          46/0  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (100.0%)  #pragma omp parallel shared(a0,a1,a2,a3,p,b0,b1,b2,c0,c1,c2,bnd,wrk1,wrk2,nn,imax,jmax,kmax,omega,gosa) private(i,j,k,s0,ss,gosa1,n)
             .         .                                                .                                                                                                                                   {
             .         .                                                .                                                                                                                                     for(n=0 ; n<nn ; n++){
             .         .                                                .                                                                                                                                   #pragma omp barrier
             .         .                                                .                                                                                                                                   #pragma omp master
             .         .                                                .                                                                                                                                       {
             .         .                                                .                                                                                                                                         gosa = 0.0;
             .         .                                                .                                                                                                                                       }
         42.3%        11  (0.0%)   (0.0%)   (0.0%)  (100.0%)           2/2  (0.0%)  (100.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)   (0.0%)      gosa1= 0.0;
             .         .                                                .                                                                                                                                   #pragma omp for nowait
             .         .                                                .                                                                                                                                       for(i=1 ; i<imax; i++)
          8.6%    54,054  (0.1%)   (0.0%)  (97.0%)   (3.0%)          11/0  (3.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (97.0%)        for(j=1 ; j<jmax ; j++)
          0.0%        81  (0.0%)   (0.0%)   (0.0%)  (100.0%)     647,535/4  (0.0%)  (0.0%)  (0.0%)  (13.6%)  (0.0%)  (0.0%)  (0.0%)  (45.7%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (40.7%)          for(k=1 ; k<kmax ; k++){
          3.2% 6,817,356  (9.3%)   (0.0%)   (3.1%)  (96.9%)          31/0  (1.5%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (6.0%)  (0.0%)  (92.4%)            s0= MR(a0,0,i,j,k)*MR(p,0,i+1,j,  k)
          3.2% 3,356,262  (4.6%)   (0.0%)   (1.5%)  (98.5%)          31/0  (0.0%)  (1.5%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (6.1%)  (0.0%)  (92.2%)              + MR(a1,0,i,j,k)*MR(p,0,i,  j+1,k)
          6.3% 6,606,054  (9.0%)   (0.0%)  (49.6%)  (50.4%)          15/0  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (3.1%)  (0.0%)  (96.8%)              + MR(a2,0,i,j,k)*MR(p,0,i,  j,  k+1)
         12.5%   103,194  (0.1%)   (0.0%)  (100.0%)   (0.0%)           8/1  (0.0%)  (47.6%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (1.6%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (50.8%)              + MR(b0,0,i,j,k)
          2.5% 6,632,275  (9.0%)   (0.0%)   (0.0%)  (100.0%)          39/0  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (6.2%)  (0.0%)  (93.7%)               *( MR(p,0,i+1,j+1,k) - MR(p,0,i+1,j-1,k)
          1.6% 3,328,481  (4.5%)   (0.0%)   (0.0%)  (100.0%)          63/0  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (6.2%)  (0.0%)  (93.7%)                - MR(p,0,i-1,j+1,k) + MR(p,0,i-1,j-1,k) )
          6.2%    50,778  (0.1%)   (0.0%)  (100.0%)   (0.0%)          16/2  (0.0%)  (96.8%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (3.2%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)   (0.0%)              + MR(b1,0,i,j,k)
          3.2% 6,630,637  (9.0%)   (0.0%)   (0.0%)  (100.0%)          31/0  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (3.1%)  (0.0%)  (96.9%)               *( MR(p,0,i,j+1,k+1) - MR(p,0,i,j-1,k+1)
             .         .                                                .                                                                                                                                                 - MR(p,0,i,j+1,k-1) + MR(p,0,i,j-1,k-1) )
             .         .                                                .                                                                                                                                               + MR(b2,0,i,j,k)
          4.7% 9,909,900 (13.4%)   (0.0%)  (66.1%)  (33.9%)          21/0  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (2.1%)  (0.0%)  (97.9%)               *( MR(p,0,i+1,j,k+1) - MR(p,0,i-1,j,k+1)
             .         .                                                .                                                                                                                                                 - MR(p,0,i+1,j,k-1) + MR(p,0,i-1,j,k-1) )
          3.2% 3,354,624  (4.6%)   (0.0%)   (1.5%)  (98.5%)          31/0  (0.0%)  (1.5%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.1%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (6.1%)  (0.0%)  (92.3%)              + MR(c0,0,i,j,k) * MR(p,0,i-1,j,  k)
          3.1% 3,303,846  (4.5%)   (0.0%)   (0.0%)  (100.0%)          31/0  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (6.2%)  (0.0%)  (93.7%)              + MR(c1,0,i,j,k) * MR(p,0,i,  j-1,k)
          3.1% 3,303,846  (4.5%)   (0.0%)   (0.0%)  (100.0%)          31/0  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (6.2%)  (0.0%)  (93.7%)              + MR(c2,0,i,j,k) * MR(p,0,i,  j,  k-1)
             .         .                                                .                                                                                                                                               + MR(wrk1,0,i,j,k);
             .         .                                                .                                                                                                                                   
          3.1% 6,609,330  (9.0%)   (0.0%)   (0.0%)  (100.0%)          32/0  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (6.2%)  (0.0%)  (93.7%)            ss= (s0*MR(a3,0,i,j,k) - MR(p,0,i,j,k))*MR(bnd,0,i,j,k);
             .         .                                                .                                                                                                                                   
             .         .                                                .                                                                                                                                             gosa1+= ss*ss;
             .         .                                                .                                                                                                                                   
          2.1% 3,354,637  (4.6%)   (0.0%)   (1.5%)  (98.5%)          47/0  (1.5%)  (0.0%)  (0.0%)  (0.1%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (6.1%)  (0.0%)  (92.3%)            MR(wrk2,0,i,j,k)= MR(p,0,i,j,k) + omega*ss;
             .         .                                                .                                                                                                                                           }
         16.7%        13  (0.0%)   (0.0%)   (0.0%)  (100.0%)           6/0  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (100.0%)  (0.0%)  (0.0%)  (0.0%)   (0.0%)  #pragma omp barrier
             .         .                                                .                                                                                                                                   #pragma omp for nowait
             .         .                                                .                                                                                                                                       for(i=1 ; i<imax ; i++)
          0.0%        13  (0.0%)   (0.0%)   (0.0%)  (108.3%)      17,476/0  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (100.0%)   (0.0%)        for(j=1 ; j<jmax ; j++)
             .         .                                                .                                                                                                                                           for(k=1 ; k<kmax ; k++)
         23.9% 6,607,692  (9.0%)   (0.0%)   (0.0%)  (100.0%)           4/0  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (6.2%)  (0.0%)  (93.7%)            MR(p,0,i,j,k)= MR(wrk2,0,i,j,k);
             .         .                                                .                                                                                                                                   
         50.0%        13  (0.0%)   (0.0%)   (0.0%)  (108.3%)           2/0  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (100.0%)  (0.0%)  (0.0%)  (0.0%)   (0.0%)  #pragma omp critical
             .         .                                                .                                                                                                                                       {
         33.3%        13  (0.0%)   (0.0%)   (0.0%)  (108.3%)           3/0  (91.7%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)   (8.3%)        gosa+= gosa1;
             .         .                                                .                                                                                                                                       }
             .         .                                                .                                                                                                                                     } /* end n loop */
             .         .                                                .                                                                                                                                   }
             .         .                                                .                                                                                                                                     return(gosa);
             .         .                                                .                                                                                                                                   }
             .         .                                                .                                                                                                                                   
             .         .                                                .                                                                                                                                   double
             .         .                                                .                                                                                                                                   second()
-- line 431 ----------------------------------------
-- line 433 ----------------------------------------
             .         .                                                .                                                                                                                                   
             .         .                                                .                                                                                                                                     struct timeval tm;
             .         .                                                .                                                                                                                                     double t ;
             .         .                                                .                                                                                                                                   
             .         .                                                .                                                                                                                                     static int base_sec = 0,base_usec = 0;
             .         .                                                .                                                                                                                                   
             .         .                                                .                                                                                                                                     gettimeofday(&tm, NULL);
             .         .                                                .                                                                                                                                     
         37.5%         3  (0.0%)   (0.0%)   (0.0%)  (150.0%)           4/6  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (100.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)   (0.0%)    if(base_sec == 0 && base_usec == 0)
             .         .                                                .                                                                                                                                       {
             .         .                                                .                                                                                                                                         base_sec = tm.tv_sec;
             .         .                                                .                                                                                                                                         base_usec = tm.tv_usec;
             .         .                                                .                                                                                                                                         t = 0.0;
             .         .                                                .                                                                                                                                     } else {
             .         .                                                .                                                                                                                                       t = (double) (tm.tv_sec-base_sec) + 
         33.3%         2  (0.0%)   (0.0%)   (0.0%)  (200.0%)           6/8  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (100.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)   (0.0%)        ((double) (tm.tv_usec-base_usec))/1.0e6 ;
             .         .                                                .                                                                                                                                     }
             .         .                                                .                                                                                                                                   
             .         .                                                .                                                                                                                                     return t ;
             .         .                                                .                                                                                                                                   }
             .         .                                                .                                                                                                                                   

--------------------------------------------------------------------------------
-- Annotation summary
--------------------------------------------------------------------------------
Access#_______ Miss#____ Comp#__ Conf#___ Cap#____ Cacheline# 1-words 2-words 3-words 4-words 5-words 6-words 7-words 8-words 9-words 10-words 11-words 12-words 13-words 14-words 15-words 16-words 

          3.5% 73,695,110 (100.0%)  (5.0%)  (14.1%)  (80.9%)          28/0  (0.2%)  (0.3%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (4.7%)  (0.0%)  (94.7%)    annotated: files known & above threshold & readable, line numbers known
             0          0   (0.0%)  (0.0%)   (0.0%)   (0.0%)             0  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)   (0.0%)    annotated: files known & above threshold & readable, line numbers unknown
             0          0   (0.0%)  (0.0%)   (0.0%)   (0.0%)             0  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)   (0.0%)  unannotated: files known & above threshold & two or more non-identical
             0          0   (0.0%)  (0.0%)   (0.0%)   (0.0%)             0  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)   (0.0%)  unannotated: files known & above threshold & unreadable 
          5.1%      4,172   (0.0%)  (72.0%)   (1.4%)  (27.6%)          19/1  (9.0%)  (14.2%)  (5.1%)  (12.7%)  (3.1%)  (4.8%)  (1.5%)  (4.7%)  (0.9%)  (3.8%)  (1.0%)  (3.4%)  (10.2%)  (6.9%)  (1.0%)  (17.7%)  unannotated: files known & below threshold
          3.8%      1,860   (0.0%)  (39.6%)   (0.5%)  (34.2%)          19/2  (1.9%)  (6.5%)  (3.6%)  (28.9%)  (0.8%)  (2.2%)  (3.7%)  (4.7%)  (10.0%)  (5.9%)  (9.3%)  (3.8%)  (2.8%)  (3.1%)  (0.7%)  (12.3%)  unannotated: files unknown

