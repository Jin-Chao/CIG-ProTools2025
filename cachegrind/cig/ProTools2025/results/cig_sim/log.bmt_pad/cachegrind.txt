--------------------------------------------------------------------------------
-- Metadata
--------------------------------------------------------------------------------
Invocation:       /home/uqcjin/bin/valgrind/bin/cg_annotate cachegrind.out.42111
I1 cache:         32768 B, 64 B, 8-way associative
D1 cache:         49152 B, 64 B, 12-way associative
LL cache:         62914560 B, 64 B, 15-way associative
Command:          ./Himeno/bin/bmt_pad.O3 -s M -l 10 -v varinfo.txt
Events recorded:  Ir I1mr ILmr Dr D1mr DLmr Dw D1mw DLmw
Events shown:     Ir I1mr ILmr Dr D1mr DLmr Dw D1mw DLmw
Event sort order: Ir I1mr ILmr Dr D1mr DLmr Dw D1mw DLmw
Threshold:        0.1%
Annotation:       on

--------------------------------------------------------------------------------
-- Summary
--------------------------------------------------------------------------------
Ir____________________ I1mr__________ ILmr__________ Dr____________________ D1mr_______________ DLmr_______________ Dw_________________ D1mw_______________ DLmw______________ 

3,477,727,610 (100.0%) 2,298 (100.0%) 2,219 (100.0%) 2,230,709,208 (100.0%) 63,422,246 (100.0%) 44,567,302 (100.0%) 82,913,239 (100.0%) 10,278,976 (100.0%) 9,421,107 (100.0%)  PROGRAM TOTALS

--------------------------------------------------------------------------------
-- File:function summary
--------------------------------------------------------------------------------
  Ir____________________________ I1mr____________ ILmr____________ Dr____________________________ D1mr_______________________ DLmr_______________________ Dw_______________________ D1mw_______________________ DLmw______________________  file:function

< 3,477,056,121 (100.0%, 100.0%) 127 (5.5%, 5.5%) 127 (5.7%, 5.7%) 2,230,549,315 (100.0%, 100.0%) 63,417,338 (100.0%, 100.0%) 44,563,633 (100.0%, 100.0%) 82,859,371 (99.9%, 99.9%) 10,277,782 (100.0%, 100.0%) 9,420,023 (100.0%, 100.0%)  /scratch/user/uqcjin/App/examples/Himeno/src/../../Himeno/src/himenoBMTxpa_pad.c:
  3,415,329,362  (98.2%)          53 (2.3%)        53 (2.4%)       2,230,546,836 (100.0%)         63,415,374 (100.0%)         44,563,618 (100.0%)         68,177,152 (82.2%)         6,607,740  (64.3%)         5,749,983  (61.0%)            jacobi._omp_fn.0
     57,315,349   (1.6%)           5 (0.2%)         5 (0.2%)               1,807   (0.0%)              1,690   (0.0%)                  6   (0.0%)         13,633,230 (16.4%)         3,407,885  (33.2%)         3,407,885  (36.2%)            mat_set
      4,410,533   (0.1%)           5 (0.2%)         5 (0.2%)                 522   (0.0%)                256   (0.0%)                  0                   1,048,712  (1.3%)           262,145   (2.6%)           262,144   (2.8%)            mat_set_init

--------------------------------------------------------------------------------
-- Function:file summary
--------------------------------------------------------------------------------
  Ir___________________________ I1mr___________ ILmr___________ Dr____________________________ D1mr_______________________ DLmr_______________________ Dw_______________________ D1mw_____________________ DLmw_____________________  function:file

> 3,415,329,362 (98.2%,  98.2%) 53 (2.3%, 2.3%) 53 (2.4%, 2.4%) 2,230,546,836 (100.0%, 100.0%) 63,415,374 (100.0%, 100.0%) 44,563,618 (100.0%, 100.0%) 68,177,152 (82.2%, 82.2%) 6,607,740 (64.3%,  64.3%) 5,749,983 (61.0%,  61.0%)  jacobi._omp_fn.0:/scratch/user/uqcjin/App/examples/Himeno/src/../../Himeno/src/himenoBMTxpa_pad.c

>    57,315,349  (1.6%,  99.9%)  5 (0.2%, 2.5%)  5 (0.2%, 2.6%)         1,807   (0.0%, 100.0%)      1,690   (0.0%, 100.0%)          6   (0.0%, 100.0%) 13,633,230 (16.4%, 98.7%) 3,407,885 (33.2%,  97.4%) 3,407,885 (36.2%,  97.2%)  mat_set:/scratch/user/uqcjin/App/examples/Himeno/src/../../Himeno/src/himenoBMTxpa_pad.c

>     4,410,533  (0.1%, 100.0%)  5 (0.2%, 2.7%)  5 (0.2%, 2.8%)           522   (0.0%, 100.0%)        256   (0.0%, 100.0%)          0   (0.0%, 100.0%)  1,048,712  (1.3%, 99.9%)   262,145  (2.6%, 100.0%)   262,144  (2.8%, 100.0%)  mat_set_init:/scratch/user/uqcjin/App/examples/Himeno/src/../../Himeno/src/himenoBMTxpa_pad.c

--------------------------------------------------------------------------------
-- Annotated source file: /scratch/user/uqcjin/App/examples/Himeno/src/../../Himeno/src/himenoBMTxpa_pad.c
--------------------------------------------------------------------------------
Ir_________________ I1mr_____ ILmr_____ Dr_________________ D1mr_____________ DLmr_____________ Dw________________ D1mw_____________ DLmw_____________ 

-- line 81 ----------------------------------------
          .          .         .                  .                 .                 .                  .                 .                 .              printf("\t    S  (64x64x128)\n");
          .          .         .                  .                 .                 .                  .                 .                 .              printf("\t    M  (128x128x256)\n");
          .          .         .                  .                 .                 .                  .                 .                 .              printf("\t    L  (256x256x512)\n");
          .          .         .                  .                 .                 .                  .                 .                 .              printf("\t    XL (512x512x1024)\n\n");
          .          .         .                  .                 .                 .                  .                 .                 .          }
          .          .         .                  .                 .                 .                  .                 .                 .          
          .          .         .                  .                 .                 .                  .                 .                 .          int
          .          .         .                  .                 .                 .                  .                 .                 .          main(int argc, char *argv[])
          9  (0.0%)  1 (0.0%)  1 (0.0%)           0                 0                 0                  6  (0.0%)         0                 0          {
          1  (0.0%)  0         0                  0                 0                 0                  0                 0                 0            int num_threads = NUM_THREADS;
          .          .         .                  .                 .                 .                  .                 .                 .            int    nn;
          2  (0.0%)  0         0                  0                 0                 0                  2  (0.0%)         0                 0            int    imax,jmax,kmax,mimax,mjmax,mkmax,msize[3] = {0, 0, 0};
          .          .         .                  .                 .                 .                  .                 .                 .            float  gosa,target;
          .          .         .                  .                 .                 .                  .                 .                 .            double  cpu0,cpu1,cpu,xmflops2,score,flop;
          .          .         .                  .                 .                 .                  .                 .                 .          
          4  (0.0%)  0         0                  0                 0                 0                  3  (0.0%)         0                 0            char   size[32] = "XS";
          1  (0.0%)  1 (0.0%)  1 (0.0%)           0                 0                 0                  0                 0                 0            int  num_loops = 60;
          1  (0.0%)  0         0                  0                 0                 0                  0                 0                 0            char *varinfo_fname = NULL;
          .          .         .                  .                 .                 .                  .                 .                 .          
          .          .         .                  .                 .                 .                  .                 .                 .          /*  if(argc == 2){
          .          .         .                  .                 .                 .                  .                 .                 .              strcpy(size,argv[1]);
          .          .         .                  .                 .                 .                  .                 .                 .            } else {
          .          .         .                  .                 .                 .                  .                 .                 .              printf("For example: \n");
          .          .         .                  .                 .                 .                  .                 .                 .              printf(" Grid-size= XS (32x32x64)\n");
          .          .         .                  .                 .                 .                  .                 .                 .              printf("\t    S  (64x64x128)\n");
          .          .         .                  .                 .                 .                  .                 .                 .              printf("\t    M  (128x128x256)\n");
-- line 106 ----------------------------------------
-- line 107 ----------------------------------------
          .          .         .                  .                 .                 .                  .                 .                 .              printf("\t    L  (256x256x512)\n");
          .          .         .                  .                 .                 .                  .                 .                 .              printf("\t    XL (512x512x1024)\n\n");
          .          .         .                  .                 .                 .                  .                 .                 .              printf("Grid-size = ");
          .          .         .                  .                 .                 .                  .                 .                 .              scanf("%s",size);
          .          .         .                  .                 .                 .                  .                 .                 .              printf("\n");
          .          .         .                  .                 .                 .                  .                 .                 .            } */
          .          .         .                  .                 .                 .                  .                 .                 .          
          .          .         .                  .                 .                 .                  .                 .                 .            int cha;
         24  (0.0%)  1 (0.0%)  1 (0.0%)           0                 0                 0                  4  (0.0%)         0                 0            while ((cha = getopt (argc, argv, "t:s:l:v:h")) != -1)
         17  (0.0%)  0         0                  0                 0                 0                  0                 0                 0              switch (cha)
          .          .         .                  .                 .                 .                  .                 .                 .              {
          .          .         .                  .                 .                 .                  .                 .                 .                case 't':
          .          .         .                  .                 .                 .                  .                 .                 .                  num_threads    = atol(optarg);
          .          .         .                  .                 .                 .                  .                 .                 .                  break;
          .          .         .                  .                 .                 .                  .                 .                 .                case 'l':
          .          .         .                  .                 .                 .                  .                 .                 .                  num_loops = atoi(optarg);
          1  (0.0%)  0         0                  0                 0                 0                  0                 0                 0                  break;
          .          .         .                  .                 .                 .                  .                 .                 .                case 's':
          3  (0.0%)  0         0                  1  (0.0%)         0                 0                  1  (0.0%)         0                 0                  strcpy(size, optarg);
          1  (0.0%)  0         0                  0                 0                 0                  0                 0                 0                  break;
          .          .         .                  .                 .                 .                  .                 .                 .                case 'v':
          1  (0.0%)  0         0                  1  (0.0%)         0                 0                  0                 0                 0                  varinfo_fname = optarg;
          1  (0.0%)  0         0                  0                 0                 0                  0                 0                 0                  break;
          .          .         .                  .                 .                 .                  .                 .                 .                case 'h':
          .          .         .                  .                 .                 .                  .                 .                 .                default:
          .          .         .                  .                 .                 .                  .                 .                 .                  print_usage(argv);
          .          .         .                  .                 .                 .                  .                 .                 .                  exit(0);
          .          .         .                  .                 .                 .                  .                 .                 .              }
          .          .         .                  .                 .                 .                  .                 .                 .          
          5  (0.0%)  1 (0.0%)  1 (0.0%)           0                 0                 0                  1  (0.0%)         0                 0            if(!set_param(msize,size))
          .          .         .                  .                 .                 .                  .                 .                 .            {
          .          .         .                  .                 .                 .                  .                 .                 .              fprintf(stderr, "ERROR: wrong grid size!\n");
          .          .         .                  .                 .                 .                  .                 .                 .              print_usage(argv);
          .          .         .                  .                 .                 .                  .                 .                 .              exit(0);
          .          .         .                  .                 .                 .                  .                 .                 .            }
          .          .         .                  .                 .                 .                  .                 .                 .          
          1  (0.0%)  0         0                  1  (0.0%)         0                 0                  0                 0                 0            mimax= msize[0];
          1  (0.0%)  1 (0.0%)  1 (0.0%)           1  (0.0%)         0                 0                  0                 0                 0            mjmax= msize[1];
          1  (0.0%)  0         0                  1  (0.0%)         0                 0                  0                 0                 0            mkmax= msize[2];
          1  (0.0%)  0         0                  0                 0                 0                  0                 0                 0            imax= mimax-1;
          1  (0.0%)  0         0                  0                 0                 0                  0                 0                 0            jmax= mjmax-1;
          1  (0.0%)  0         0                  0                 0                 0                  0                 0                 0            kmax= mkmax-1;
          .          .         .                  .                 .                 .                  .                 .                 .          
          .          .         .                  .                 .                 .                  .                 .                 .            target = 60.0;
          .          .         .                  .                 .                 .                  .                 .                 .          
          6  (0.0%)  0         0                  0                 0                 0                  1  (0.0%)         0                 0            printf("mimax = %d mjmax = %d mkmax = %d\n",mimax,mjmax,mkmax);
          3  (0.0%)  0         0                  0                 0                 0                  1  (0.0%)         0                 0            printf("imax = %d jmax = %d kmax =%d\n",imax,jmax,kmax);
          .          .         .                  .                 .                 .                  .                 .                 .          
          .          .         .                  .                 .                 .                  .                 .                 .            /*
          .          .         .                  .                 .                 .                  .                 .                 .             *    Initializing matrixes
          .          .         .                  .                 .                 .                  .                 .                 .             */
          .          .         .                  .                 .                 .                  .                 .                 .            newMat(&p,1,mimax,mjmax,mkmax, 0);
          .          .         .                  .                 .                 .                  .                 .                 .            newMat(&bnd,1,mimax,mjmax,mkmax, 113);
          .          .         .                  .                 .                 .                  .                 .                 .            newMat(&wrk1,1,mimax,mjmax,mkmax, 129);
          .          .         .                  .                 .                 .                  .                 .                 .            newMat(&wrk2,1,mimax,mjmax,mkmax, 113);
-- line 161 ----------------------------------------
-- line 168 ----------------------------------------
          .          .         .                  .                 .                 .                  .                 .                 .            newMat(&b2,1,mimax,mjmax,mkmax, 51);
          .          .         .                  .                 .                 .                  .                 .                 .            newMat(&c0,1,mimax,mjmax,mkmax, 67);
          .          .         .                  .                 .                 .                  .                 .                 .            newMat(&c1,1,mimax,mjmax,mkmax, 79);
          .          .         .                  .                 .                 .                  .                 .                 .            newMat(&c2,1,mimax,mjmax,mkmax, 97);
          .          .         .                  .                 .                 .                  .                 .                 .          /*  newMat(&a,4,mimax,mjmax,mkmax, 17);
          .          .         .                  .                 .                 .                  .                 .                 .            newMat(&b,3,mimax,mjmax,mkmax, 33);
          .          .         .                  .                 .                 .                  .                 .                 .            newMat(&c,3,mimax,mjmax,mkmax, 51);*/
          .          .         .                  .                 .                 .                  .                 .                 .          
          2  (0.0%)  0         0                  0                 0                 0                  0                 0                 0            if(varinfo_fname != NULL)
          .          .         .                  .                 .                 .                  .                 .                 .            {
          2  (0.0%)  1 (0.0%)  1 (0.0%)           0                 0                 0                  1  (0.0%)         0                 0              int res = varinfo_file_open(varinfo_fname);
          2  (0.0%)  0         0                  0                 0                 0                  0                 0                 0              if(res)
          .          .         .                  .                 .                 .                  .                 .                 .                fprintf(stderr, "Cannot open %s for recording varinfo\n", varinfo_fname);
          .          .         .                  .                 .                 .                  .                 .                 .          
         13  (0.0%)  1 (0.0%)  1 (0.0%)           3  (0.0%)         0                 0                  1  (0.0%)         0                 0              varinfo_file_print(getName(p), &MR((&p), 0, 0, 0, 0), &MR((&p), 0, imax-1, jmax-1, kmax-1));
         10  (0.0%)  0         0                  3  (0.0%)         0                 0                  1  (0.0%)         0                 0              varinfo_file_print(getName(bnd), &MR((&bnd), 0, 0, 0, 0), &MR((&bnd), 0, imax-1, jmax-1, kmax-1));
         10  (0.0%)  1 (0.0%)  1 (0.0%)           3  (0.0%)         0                 0                  1  (0.0%)         0                 0              varinfo_file_print(getName(wrk1), &MR((&wrk1), 0, 0, 0, 0), &MR((&wrk1), 0, imax-1, jmax-1, kmax-1));
         10  (0.0%)  1 (0.0%)  1 (0.0%)           3  (0.0%)         0                 0                  1  (0.0%)         0                 0              varinfo_file_print(getName(wrk2), &MR((&wrk2), 0, 0, 0, 0), &MR((&wrk2), 0, imax-1, jmax-1, kmax-1));
         10  (0.0%)  0         0                  3  (0.0%)         0                 0                  1  (0.0%)         0                 0              varinfo_file_print(getName(a0), &MR((&a0), 0, 0, 0, 0), &MR((&a0), 0, imax-1, jmax-1, kmax-1));
         10  (0.0%)  1 (0.0%)  1 (0.0%)           3  (0.0%)         0                 0                  1  (0.0%)         0                 0              varinfo_file_print(getName(a1), &MR((&a1), 0, 0, 0, 0), &MR((&a1), 0, imax-1, jmax-1, kmax-1));
         10  (0.0%)  1 (0.0%)  1 (0.0%)           3  (0.0%)         0                 0                  1  (0.0%)         0                 0              varinfo_file_print(getName(a2), &MR((&a2), 0, 0, 0, 0), &MR((&a2), 0, imax-1, jmax-1, kmax-1));
         10  (0.0%)  1 (0.0%)  1 (0.0%)           3  (0.0%)         0                 0                  1  (0.0%)         0                 0              varinfo_file_print(getName(a3), &MR((&a3), 0, 0, 0, 0), &MR((&a3), 0, imax-1, jmax-1, kmax-1));
         10  (0.0%)  0         0                  3  (0.0%)         0                 0                  1  (0.0%)         0                 0              varinfo_file_print(getName(b0), &MR((&b0), 0, 0, 0, 0), &MR((&b0), 0, imax-1, jmax-1, kmax-1));
         10  (0.0%)  1 (0.0%)  1 (0.0%)           3  (0.0%)         0                 0                  1  (0.0%)         0                 0              varinfo_file_print(getName(b1), &MR((&b1), 0, 0, 0, 0), &MR((&b1), 0, imax-1, jmax-1, kmax-1));
         10  (0.0%)  1 (0.0%)  1 (0.0%)           3  (0.0%)         0                 0                  1  (0.0%)         0                 0              varinfo_file_print(getName(b2), &MR((&b2), 0, 0, 0, 0), &MR((&b2), 0, imax-1, jmax-1, kmax-1));
         10  (0.0%)  0         0                  3  (0.0%)         0                 0                  1  (0.0%)         0                 0              varinfo_file_print(getName(c0), &MR((&c0), 0, 0, 0, 0), &MR((&c0), 0, imax-1, jmax-1, kmax-1));
         10  (0.0%)  1 (0.0%)  1 (0.0%)           3  (0.0%)         0                 0                  1  (0.0%)         0                 0              varinfo_file_print(getName(c1), &MR((&c1), 0, 0, 0, 0), &MR((&c1), 0, imax-1, jmax-1, kmax-1));
         10  (0.0%)  1 (0.0%)  1 (0.0%)           3  (0.0%)         0                 0                  1  (0.0%)         0                 0              varinfo_file_print(getName(c2), &MR((&c2), 0, 0, 0, 0), &MR((&c2), 0, imax-1, jmax-1, kmax-1));
          2  (0.0%)  0         0                  0                 0                 0                  1  (0.0%)         0                 0              varinfo_file_close();
          .          .         .                  .                 .                 .                  .                 .                 .            }
          .          .         .                  .                 .                 .                  .                 .                 .           
          2  (0.0%)  0         0                  0                 0                 0                  1  (0.0%)         0                 0            mat_set_init(&p);
          5  (0.0%)  1 (0.0%)  1 (0.0%)           1  (0.0%)         1  (0.0%)         0                  1  (0.0%)         0                 0            mat_set(&bnd,0,1.0);
          4  (0.0%)  0         0                  0                 0                 0                  1  (0.0%)         0                 0            mat_set(&wrk1,0,0.0);
          3  (0.0%)  0         0                  0                 0                 0                  1  (0.0%)         0                 0            mat_set(&wrk2,0,0.0);
          4  (0.0%)  0         0                  0                 0                 0                  1  (0.0%)         0                 0            mat_set(&a0,0,1.0);
          3  (0.0%)  0         0                  0                 0                 0                  1  (0.0%)         0                 0            mat_set(&a1,0,1.0);
          3  (0.0%)  1 (0.0%)  1 (0.0%)           0                 0                 0                  1  (0.0%)         0                 0            mat_set(&a2,0,1.0);
          4  (0.0%)  0         0                  1  (0.0%)         1  (0.0%)         1  (0.0%)          1  (0.0%)         0                 0            mat_set(&a3,0,1.0/6.0);
          4  (0.0%)  0         0                  0                 0                 0                  1  (0.0%)         0                 0            mat_set(&b0,0,0.0);
          3  (0.0%)  0         0                  0                 0                 0                  1  (0.0%)         0                 0            mat_set(&b1,0,0.0);
          3  (0.0%)  0         0                  0                 0                 0                  1  (0.0%)         0                 0            mat_set(&b2,0,0.0);
          4  (0.0%)  1 (0.0%)  1 (0.0%)           0                 0                 0                  1  (0.0%)         0                 0            mat_set(&c0,0,1.0);
          3  (0.0%)  0         0                  0                 0                 0                  1  (0.0%)         0                 0            mat_set(&c1,0,1.0);
          3  (0.0%)  0         0                  0                 0                 0                  1  (0.0%)         0                 0            mat_set(&c2,0,1.0);
          .          .         .                  .                 .                 .                  .                 .                 .          
          2  (0.0%)  0         0                  0                 0                 0                  1  (0.0%)         0                 0            omp_set_num_threads(num_threads);
          .          .         .                  .                 .                 .                  .                 .                 .          
          .          .         .                  .                 .                 .                  .                 .                 .            /*
          .          .         .                  .                 .                 .                  .                 .                 .             *    Start measuring
          .          .         .                  .                 .                 .                  .                 .                 .             */
          .          .         .                  .                 .                 .                  .                 .                 .            nn= 3;
          2  (0.0%)  0         0                  0                 0                 0                  1  (0.0%)         0                 0            printf(" Start rehearsal measurement process.\n");
          4  (0.0%)  1 (0.0%)  1 (0.0%)           0                 0                 0                  1  (0.0%)         0                 0            printf(" Measure the performance in %d times.\n\n",nn);
          .          .         .                  .                 .                 .                  .                 .                 .          
          3  (0.0%)  0         0                  0                 0                 0                  2  (0.0%)         0                 0            cpu0= second();
          .          .         .                  .                 .                 .                  .                 .                 .          //  gosa= jacobi(nn,&a,&b,&c,&p,&bnd,&wrk1,&wrk2);
         18  (0.0%)  1 (0.0%)  1 (0.0%)           0                 0                 0                 12  (0.0%)         1  (0.0%)         1  (0.0%)    gosa= jacobi(nn,&a0,&a1,&a2,&a3,&b0,&b1,&b2,&c0,&c1,&c2,&p,&bnd,&wrk1,&wrk2);
          3  (0.0%)  0         0                  0                 0                 0                  1  (0.0%)         1  (0.0%)         1  (0.0%)    cpu1= second();
          2  (0.0%)  0         0                  1  (0.0%)         0                 0                  0                 0                 0            cpu= cpu1 - cpu0;
         10  (0.0%)  1 (0.0%)  1 (0.0%)           1  (0.0%)         0                 0                  0                 0                 0            flop = (double)(kmax-1)*(double)(jmax-1)*(double)(imax-1)*34.0;
          .          .         .                  .                 .                 .                  .                 .                 .          
          5  (0.0%)  1 (0.0%)  1 (0.0%)           1  (0.0%)         0                 0                  0                 0                 0            if(cpu != 0.0)
          5  (0.0%)  0         0                  2  (0.0%)         0                 0                  1  (0.0%)         0                 0              xmflops2= flop/cpu*1.e-6*nn;
          .          .         .                  .                 .                 .                  .                 .                 .          
          5  (0.0%)  0         0                  1  (0.0%)         0                 0                  1  (0.0%)         0                 0            printf(" MFLOPS: %f time(s): %f %e\n\n",xmflops2,cpu,gosa);
          .          .         .                  .                 .                 .                  .                 .                 .          
          .          .         .                  .                 .                 .                  .                 .                 .            //nn= (int)(target/(cpu/3.0));
          .          .         .                  .                 .                 .                  .                 .                 .            nn= num_loops;
          .          .         .                  .                 .                 .                  .                 .                 .          
          2  (0.0%)  1 (0.0%)  1 (0.0%)           0                 0                 0                  1  (0.0%)         0                 0            printf(" Now, start the actual measurement process.\n");
          4  (0.0%)  0         0                  0                 0                 0                  1  (0.0%)         0                 0            printf(" The loop will be excuted in %d times\n",nn);
          2  (0.0%)  0         0                  0                 0                 0                  1  (0.0%)         0                 0            printf(" This will take about one minute.\n");
          2  (0.0%)  0         0                  0                 0                 0                  1  (0.0%)         0                 0            printf(" Wait for a while\n\n");
          .          .         .                  .                 .                 .                  .                 .                 .          
          3  (0.0%)  0         0                  0                 0                 0                  2  (0.0%)         0                 0            cpu0 = second();
         18  (0.0%)  2 (0.1%)  2 (0.1%)           0                 0                 0                 11  (0.0%)         0                 0            gosa= jacobi(nn,&a0,&a1,&a2,&a3,&b0,&b1,&b2,&c0,&c1,&c2,&p,&bnd,&wrk1,&wrk2);
          3  (0.0%)  0         0                  0                 0                 0                  1  (0.0%)         1  (0.0%)         1  (0.0%)    cpu1 = second();
          1  (0.0%)  0         0                  1  (0.0%)         0                 0                  0                 0                 0            cpu = cpu1 - cpu0;
          .          .         .                  .                 .                 .                  .                 .                 .          
          4  (0.0%)  0         0                  0                 0                 0                  0                 0                 0            if(cpu != 0.0)
          7  (0.0%)  1 (0.0%)  1 (0.0%)           1  (0.0%)         0                 0                  1  (0.0%)         1  (0.0%)         1  (0.0%)      xmflops2 = (double)flop/cpu*1.0e-6*nn;
          .          .         .                  .                 .                 .                  .                 .                 .          
          3  (0.0%)  0         0                  0                 0                 0                  1  (0.0%)         0                 0            printf("cpu : %f sec.\n", cpu);
          4  (0.0%)  0         0                  0                 0                 0                  1  (0.0%)         0                 0            printf("Loop executed for %d times\n",nn);
          6  (0.0%)  1 (0.0%)  1 (0.0%)           0                 0                 0                  1  (0.0%)         0                 0            printf("Gosa : %e \n",gosa);
          4  (0.0%)  0         0                  1  (0.0%)         0                 0                  1  (0.0%)         0                 0            printf("MFLOPS measured : %f\n",xmflops2);
          2  (0.0%)  0         0                  2  (0.0%)         0                 0                  0                 0                 0            score = xmflops2/82.84;
          3  (0.0%)  0         0                  0                 0                 0                  1  (0.0%)         0                 0            printf("Score based on Pentium III 600MHz using Fortran 77: %f\n",score);
          .          .         .                  .                 .                 .                  .                 .                 .          
          .          .         .                  .                 .                 .                  .                 .                 .            /*
          .          .         .                  .                 .                 .                  .                 .                 .             *   Matrix free
          .          .         .                  .                 .                 .                  .                 .                 .             */ 
          .          .         .                  .                 .                 .                  .                 .                 .            clearMat(&p);
          .          .         .                  .                 .                 .                  .                 .                 .            clearMat(&bnd);
          .          .         .                  .                 .                 .                  .                 .                 .            clearMat(&wrk1);
          .          .         .                  .                 .                 .                  .                 .                 .            clearMat(&wrk2);
-- line 264 ----------------------------------------
-- line 269 ----------------------------------------
          .          .         .                  .                 .                 .                  .                 .                 .            clearMat(&b0);
          .          .         .                  .                 .                 .                  .                 .                 .            clearMat(&b1);
          .          .         .                  .                 .                 .                  .                 .                 .            clearMat(&b2);
          .          .         .                  .                 .                 .                  .                 .                 .            clearMat(&c0);
          .          .         .                  .                 .                 .                  .                 .                 .            clearMat(&c1);
          .          .         .                  .                 .                 .                  .                 .                 .            clearMat(&c2);
          .          .         .                  .                 .                 .                  .                 .                 .            
          .          .         .                  .                 .                 .                  .                 .                 .            return (0);
          9  (0.0%)  0         0                  7  (0.0%)         1  (0.0%)         1  (0.0%)          0                 0                 0          }
          .          .         .                  .                 .                 .                  .                 .                 .          
          .          .         .                  .                 .                 .                  .                 .                 .          bool
          .          .         .                  .                 .                 .                  .                 .                 .          set_param(int is[],char *size)
          .          .         .                  .                 .                 .                  .                 .                 .          {
          5  (0.0%)  2 (0.1%)  2 (0.1%)           1  (0.0%)         0                 0                  0                 0                 0            if(!strcmp(size,"XS") || !strcmp(size,"xs")){
          .          .         .                  .                 .                 .                  .                 .                 .              is[0]= 32;
          .          .         .                  .                 .                 .                  .                 .                 .              is[1]= 32;
          .          .         .                  .                 .                 .                  .                 .                 .              is[2]= 64;
          1  (0.0%)  0         0                  0                 0                 0                  0                 0                 0              return true;
          .          .         .                  .                 .                 .                  .                 .                 .            }
          5  (0.0%)  0         0                  1  (0.0%)         0                 0                  0                 0                 0            if(!strcmp(size,"S") || !strcmp(size,"s")){
          1  (0.0%)  0         0                  0                 0                 0                  1  (0.0%)         0                 0              is[0]= 64;
          .          .         .                  .                 .                 .                  .                 .                 .              is[1]= 64;
          2  (0.0%)  0         0                  1  (0.0%)         0                 0                  1  (0.0%)         0                 0              is[2]= 128;
          .          .         .                  .                 .                 .                  .                 .                 .              return true;
          .          .         .                  .                 .                 .                  .                 .                 .            }
          6  (0.0%)  1 (0.0%)  1 (0.0%)           2  (0.0%)         1  (0.0%)         1  (0.0%)          0                 0                 0            if(!strcmp(size,"M") || !strcmp(size,"m")){
          .          .         .                  .                 .                 .                  .                 .                 .              is[0]= 128;
          .          .         .                  .                 .                 .                  .                 .                 .              is[1]= 128;
          .          .         .                  .                 .                 .                  .                 .                 .              is[2]= 256;
          .          .         .                  .                 .                 .                  .                 .                 .              return true;
          .          .         .                  .                 .                 .                  .                 .                 .            }
          .          .         .                  .                 .                 .                  .                 .                 .            if(!strcmp(size,"L") || !strcmp(size,"l")){
          .          .         .                  .                 .                 .                  .                 .                 .              is[0]= 256;
          .          .         .                  .                 .                 .                  .                 .                 .              is[1]= 256;
-- line 302 ----------------------------------------
-- line 310 ----------------------------------------
          .          .         .                  .                 .                 .                  .                 .                 .              return true;
          .          .         .                  .                 .                 .                  .                 .                 .            }
          .          .         .                  .                 .                 .                  .                 .                 .            return false;
          .          .         .                  .                 .                 .                  .                 .                 .          }
          .          .         .                  .                 .                 .                  .                 .                 .          
          .          .         .                  .                 .                 .                  .                 .                 .          int
          .          .         .                  .                 .                 .                  .                 .                 .          newMat(Matrix* Mat, int mnums,int mrows, int mcols, int mdeps, int pad)
          .          .         .                  .                 .                 .                  .                 .                 .          {
         14  (0.0%)  3 (0.1%)  3 (0.1%)           0                 0                 0                 14  (0.0%)         3  (0.0%)         2  (0.0%)    Mat->mnums= mnums;
         14  (0.0%)  2 (0.1%)  2 (0.1%)           0                 0                 0                 14  (0.0%)         5  (0.0%)         5  (0.0%)    Mat->mrows= mrows;
         14  (0.0%)  4 (0.2%)  4 (0.2%)           0                 0                 0                 14  (0.0%)         0                 0            Mat->mcols= mcols;
         14  (0.0%)  1 (0.0%)  1 (0.0%)           0                 0                 0                 14  (0.0%)         0                 0            Mat->mdeps= mdeps;
          .          .         .                  .                 .                 .                  .                 .                 .            Mat->buffer= NULL;
         16  (0.0%)  1 (0.0%)  1 (0.0%)           0                 0                 0                 14  (0.0%)         0                 0            Mat->buffer= (float*) 
         49  (0.0%)  4 (0.2%)  4 (0.2%)          13  (0.0%)         0                 0                 17  (0.0%)         0                 0              malloc((mnums * mrows * mcols * mdeps + pad) * sizeof(float));
          .          .         .                  .                 .                 .                  .                 .                 .            
         26  (0.0%)  0         0                  0                 0                 0                 13  (0.0%)         0                 0            Mat->m = Mat->buffer + pad;
          .          .         .                  .                 .                 .                  .                 .                 .          
          .          .         .                  .                 .                 .                  .                 .                 .            return(Mat->buffer != NULL) ? 1:0;
          .          .         .                  .                 .                 .                  .                 .                 .          }
          .          .         .                  .                 .                 .                  .                 .                 .          
          .          .         .                  .                 .                 .                  .                 .                 .          void
          .          .         .                  .                 .                 .                  .                 .                 .          clearMat(Matrix* Mat)
          .          .         .                  .                 .                 .                  .                 .                 .          {
         42  (0.0%)  3 (0.1%)  3 (0.1%)          14  (0.0%)         7  (0.0%)         2  (0.0%)          0                 0                 0            if(Mat->buffer)
         14  (0.0%)  1 (0.0%)  1 (0.0%)           0                 0                 0                 14  (0.0%)         0                 0              free(Mat->buffer);
         28  (0.0%)  3 (0.1%)  3 (0.1%)           0                 0                 0                 14  (0.0%)         0                 0            Mat->buffer= NULL;
          .          .         .                  .                 .                 .                  .                 .                 .            Mat->m= NULL;
         28  (0.0%)  2 (0.1%)  2 (0.1%)           0                 0                 0                 14  (0.0%)         0                 0            Mat->mnums= 0;
          .          .         .                  .                 .                 .                  .                 .                 .            Mat->mcols= 0;
          .          .         .                  .                 .                 .                  .                 .                 .            Mat->mrows= 0;
          .          .         .                  .                 .                 .                  .                 .                 .            Mat->mdeps= 0;
          .          .         .                  .                 .                 .                  .                 .                 .          }
          .          .         .                  .                 .                 .                  .                 .                 .          
          .          .         .                  .                 .                 .                  .                 .                 .          void
          .          .         .                  .                 .                 .                  .                 .                 .          mat_set(Matrix* Mat, int l, float val)
        104  (0.0%)  0         0                  0                 0                 0                 78  (0.0%)         0                 0          {
          .          .         .                  .                 .                 .                  .                 .                 .            int i,j,k;
          .          .         .                  .                 .                 .                  .                 .                 .          
      8,372  (0.0%)  2 (0.1%)  2 (0.1%)       1,677  (0.0%)     1,677  (0.0%)         6  (0.0%)          0                 0                 0              for(i=0; i<Mat->mrows; i++)
  1,076,764  (0.0%)  2 (0.1%)  2 (0.1%)          26  (0.0%)         0                 0              1,664  (0.0%)         0                 0                for(j=0; j<Mat->mcols; j++)
 42,598,530  (1.2%)  1 (0.0%)  1 (0.0%)          13  (0.0%)         0                 0                  0                 0                 0                  for(k=0; k<Mat->mdeps; k++)
 13,631,488  (0.4%)  0         0                  0                 0                 0         13,631,488 (16.4%) 3,407,885 (33.2%) 3,407,885 (36.2%)            MR(Mat,l,i,j,k)= val;
         91  (0.0%)  0         0                 91  (0.0%)        13  (0.0%)         0                  0                 0                 0          }
          .          .         .                  .                 .                 .                  .                 .                 .          
          .          .         .                  .                 .                 .                  .                 .                 .          void
          .          .         .                  .                 .                 .                  .                 .                 .          mat_set_init(Matrix* Mat)
          7  (0.0%)  1 (0.0%)  1 (0.0%)           0                 0                 0                  7  (0.0%)         0                 0          {
          .          .         .                  .                 .                 .                  .                 .                 .            int  i,j,k,l;
          .          .         .                  .                 .                 .                  .                 .                 .            float tt;
          .          .         .                  .                 .                 .                  .                 .                 .          
        516  (0.0%)  0         0                  1  (0.0%)         0                 0                  0                 0                 0            for(i=0; i<Mat->mrows; i++)
     82,177  (0.0%)  1 (0.0%)  1 (0.0%)         129  (0.0%)       128  (0.0%)         0                  0                 0                 0              for(j=0; j<Mat->mcols; j++)
  3,276,813  (0.1%)  1 (0.0%)  1 (0.0%)           1  (0.0%)         0                 0                  0                 0                 0                for(k=0; k<Mat->mdeps; k++)
  1,049,856  (0.0%)  2 (0.1%)  2 (0.1%)         256  (0.0%)       127  (0.0%)         0          1,048,704  (1.3%)   262,145  (2.6%)   262,144  (2.8%)          MR(Mat,0,i,j,k)= (float)(i*i)
      1,157  (0.0%)  0         0                128  (0.0%)         0                 0                  1  (0.0%)         0                 0                    /(float)((Mat->mrows - 1)*(Mat->mrows - 1));
          7  (0.0%)  0         0                  7  (0.0%)         1  (0.0%)         0                  0                 0                 0          }
          .          .         .                  .                 .                 .                  .                 .                 .          
          .          .         .                  .                 .                 .                  .                 .                 .          float
          .          .         .                  .                 .                 .                  .                 .                 .          jacobi(int nn, Matrix* a0, Matrix* a1, Matrix* a2, Matrix* a3, Matrix* b0, Matrix* b1, Matrix*b2, Matrix* c0, Matrix*c1, Matrix*c2,
          .          .         .                  .                 .                 .                  .                 .                 .                 Matrix* p,Matrix* bnd,Matrix* wrk1,Matrix* wrk2)
          8  (0.0%)  2 (0.1%)  2 (0.1%)           2  (0.0%)         0                 0                  0                 0                 0          {
          .          .         .                  .                 .                 .                  .                 .                 .            int    i,j,k,n,imax,jmax,kmax;
          .          .         .                  .                 .                 .                  .                 .                 .            float  gosa,gosa1,s0,ss;
          .          .         .                  .                 .                 .                  .                 .                 .          
          4  (0.0%)  0         0                  2  (0.0%)         2  (0.0%)         1  (0.0%)          0                 0                 0            imax= p->mrows-1;
          6  (0.0%)  0         0                  2  (0.0%)         0                 0                  0                 0                 0            jmax= p->mcols-1;
          4  (0.0%)  0         0                  2  (0.0%)         0                 0                  0                 0                 0            kmax= p->mdeps-1;
        168  (0.0%) 11 (0.5%) 11 (0.5%)          66  (0.0%)         4  (0.0%)         2  (0.0%)         76  (0.0%)         0                 0          #pragma omp parallel shared(a0,a1,a2,a3,p,b0,b1,b2,c0,c1,c2,bnd,wrk1,wrk2,nn,imax,jmax,kmax,omega,gosa) private(i,j,k,s0,ss,gosa1,n)
          .          .         .                  .                 .                 .                  .                 .                 .          {
        103  (0.0%)  3 (0.1%)  3 (0.1%)           0                 0                 0                 23  (0.0%)         0                 0            for(n=0 ; n<nn ; n++){
         13  (0.0%)  1 (0.0%)  1 (0.0%)           0                 0                 0                 13  (0.0%)         0                 0          #pragma omp barrier
         52  (0.0%)  0         0                  0                 0                 0                 13  (0.0%)         0                 0          #pragma omp master
          .          .         .                  .                 .                 .                  .                 .                 .              {
         13  (0.0%)  0         0                  0                 0                 0                 13  (0.0%)         0                 0                gosa = 0.0;
          .          .         .                  .                 .                 .                  .                 .                 .              }
        182  (0.0%)  1 (0.0%)  1 (0.0%)          13  (0.0%)        11  (0.0%)         0                 13  (0.0%)         0                 0              gosa1= 0.0;
          .          .         .                  .                 .                 .                  .                 .                 .          #pragma omp for nowait
          .          .         .                  .                 .                 .                  .                 .                 .              for(i=1 ; i<imax; i++)
  1,462,851  (0.0%)  3 (0.1%)  3 (0.1%)     425,919  (0.0%)    54,054  (0.1%)         0            204,763  (0.2%)         0                 0                for(j=1 ; j<jmax ; j++)
419,413,176 (12.1%)  2 (0.1%)  2 (0.1%)  52,440,570  (2.4%)        59  (0.0%)        13  (0.0%)      9,828  (0.0%)        22  (0.0%)         0                  for(k=1 ; k<kmax ; k++){
213,000,606  (6.1%)  2 (0.1%)  2 (0.1%) 211,341,312  (9.5%) 6,817,356 (10.7%) 6,608,946 (14.8%)      1,638  (0.0%)         0                 0                    s0= MR(a0,0,i,j,k)*MR(p,0,i+1,j,  k)
161,195,580  (4.6%)  3 (0.1%)  3 (0.1%) 105,877,044  (4.7%) 3,356,262  (5.3%) 3,303,847  (7.4%)    208,026  (0.3%)         0                 0                      + MR(a1,0,i,j,k)*MR(p,0,i,  j+1,k)
159,331,536  (4.6%)  1 (0.0%)  1 (0.0%) 105,670,656  (4.7%) 6,606,054 (10.4%) 3,303,861  (7.4%)          0                 0                 0                      + MR(a2,0,i,j,k)*MR(p,0,i,  j,  k+1)
 54,280,044  (1.6%)  1 (0.0%)  1 (0.0%)     825,552  (0.0%)   103,194  (0.2%)         0                  0                 0                 0                      + MR(b0,0,i,j,k)
264,589,416  (7.6%)  0         0        262,112,760 (11.8%) 6,632,275 (10.5%) 5,880,007 (13.2%)    206,388  (0.2%)         0                 0                       *( MR(p,0,i+1,j+1,k) - MR(p,0,i+1,j-1,k)
211,057,938  (6.1%)  9 (0.4%)  9 (0.4%) 210,175,056  (9.4%) 3,328,481  (5.2%)    26,431  (0.1%)    466,830  (0.6%)         0                 0                        - MR(p,0,i-1,j+1,k) + MR(p,0,i-1,j-1,k) )
 54,280,044  (1.6%)  2 (0.1%)  2 (0.1%)     825,552  (0.0%)    50,778  (0.1%)         0                  0                 0                 0                      + MR(b1,0,i,j,k)
210,102,984  (6.0%)  1 (0.0%)  1 (0.0%) 209,690,208  (9.4%) 6,630,637 (10.5%) 3,323,517  (7.5%)          0                 0                 0                       *( MR(p,0,i,j+1,k+1) - MR(p,0,i,j-1,k+1)
104,845,104  (3.0%)  0         0        104,845,104  (4.7%)         0                 0                  0                 0                 0                        - MR(p,0,i,j+1,k-1) + MR(p,0,i,j-1,k-1) )
 55,311,984  (1.6%)  2 (0.1%)  2 (0.1%)     825,552  (0.0%)         0                 0            412,776  (0.5%)         0                 0                      + MR(b2,0,i,j,k)
210,722,148  (6.1%)  0         0        209,896,596  (9.4%) 9,909,900 (15.6%) 3,322,864  (7.5%)          0                 0                 0                       *( MR(p,0,i+1,j,k+1) - MR(p,0,i-1,j,k+1)
104,845,104  (3.0%)  0         0        104,845,104  (4.7%)         0                 0                  0                 0                 0                        - MR(p,0,i+1,j,k-1) + MR(p,0,i-1,j,k-1) )
159,331,536  (4.6%)  1 (0.0%)  1 (0.0%) 105,670,656  (4.7%) 3,354,624  (5.3%) 3,239,781  (7.3%)    206,388  (0.2%)         0                 0                      + MR(c0,0,i,j,k) * MR(p,0,i-1,j,  k)
159,125,148  (4.6%)  1 (0.0%)  1 (0.0%) 105,670,656  (4.7%) 3,303,846  (5.2%) 3,239,595  (7.3%)          0                 0                 0                      + MR(c1,0,i,j,k) * MR(p,0,i,  j-1,k)
159,125,148  (4.6%)  1 (0.0%)  1 (0.0%) 105,670,656  (4.7%) 3,303,846  (5.2%) 3,239,401  (7.3%)          0                 0                 0                      + MR(c2,0,i,j,k) * MR(p,0,i,  j,  k-1)
  2,270,268  (0.1%)  0         0            825,552  (0.0%)         0                 0                  0                 0                 0                      + MR(wrk1,0,i,j,k);
          .          .         .                  .                 .                 .                  .                 .                 .          
266,034,132  (7.6%)  2 (0.1%)  2 (0.1%) 211,547,700  (9.5%) 6,609,330 (10.4%) 6,607,693 (14.8%)    206,388  (0.2%)         0                 0                    ss= (s0*MR(a3,0,i,j,k) - MR(p,0,i,j,k))*MR(bnd,0,i,j,k);
          .          .         .                  .                 .                 .                  .                 .                 .          
157,267,656  (4.5%)  0         0                  0                 0                 0                  0                 0                 0                    gosa1+= ss*ss;
          .          .         .                  .                 .                 .                  .                 .                 .          
212,579,640  (6.1%)  1 (0.0%)  1 (0.0%) 106,083,432  (4.8%)    50,791  (0.1%)        13  (0.0%) 52,835,328 (63.7%) 3,303,846 (32.1%) 3,282,115 (34.8%)            MR(wrk2,0,i,j,k)= MR(p,0,i,j,k) + omega*ss;
          .          .         .                  .                 .                 .                  .                 .                 .                  }
        104  (0.0%)  0         0                 39  (0.0%)         0                 0                 39  (0.0%)        13  (0.0%)        13  (0.0%)  #pragma omp barrier
          .          .         .                  .                 .                 .                  .                 .                 .          #pragma omp for nowait
          .          .         .                  .                 .                 .                  .                 .                 .              for(i=1 ; i<imax ; i++)
    835,445  (0.0%)  3 (0.1%)  3 (0.1%)     209,716  (0.0%)        13  (0.0%)        13  (0.0%)          0                 0                 0                for(j=1 ; j<jmax ; j++)
 41,071,222  (1.2%)  1 (0.0%)  1 (0.0%)     825,552  (0.0%)         0                 0                  4  (0.0%)         0                 0                  for(k=1 ; k<kmax ; k++)
 33,250,022  (1.0%)  6 (0.3%)  6 (0.3%)  14,245,803  (0.6%) 3,303,846  (5.2%) 2,467,621  (5.5%) 13,418,600 (16.2%) 3,303,846 (32.1%) 2,467,855 (26.2%)            MR(p,0,i,j,k)= MR(wrk2,0,i,j,k);
          .          .         .                  .                 .                 .                  .                 .                 .          
         26  (0.0%)  0         0                  0                 0                 0                 26  (0.0%)        13  (0.0%)         0          #pragma omp critical
          .          .         .                  .                 .                 .                  .                 .                 .              {
         39  (0.0%)  0         0                 26  (0.0%)        13  (0.0%)        13  (0.0%)         13  (0.0%)         0                 0                gosa+= gosa1;
          .          .         .                  .                 .                 .                  .                 .                 .              }
          .          .         .                  .                 .                 .                  .                 .                 .            } /* end n loop */
          .          .         .                  .                 .                 .                  .                 .                 .          }
          .          .         .                  .                 .                 .                  .                 .                 .            return(gosa);
          6  (0.0%)  0         0                  4  (0.0%)         0                 0                  0                 0                 0          }
          .          .         .                  .                 .                 .                  .                 .                 .          
          .          .         .                  .                 .                 .                  .                 .                 .          double
          .          .         .                  .                 .                 .                  .                 .                 .          second()
          4  (0.0%)  1 (0.0%)  1 (0.0%)           0                 0                 0                  0                 0                 0          {
          .          .         .                  .                 .                 .                  .                 .                 .          
          .          .         .                  .                 .                 .                  .                 .                 .            struct timeval tm;
          .          .         .                  .                 .                 .                  .                 .                 .            double t ;
          .          .         .                  .                 .                 .                  .                 .                 .          
          .          .         .                  .                 .                 .                  .                 .                 .            static int base_sec = 0,base_usec = 0;
          .          .         .                  .                 .                 .                  .                 .                 .          
         12  (0.0%)  0         0                  0                 0                 0                  4  (0.0%)         0                 0            gettimeofday(&tm, NULL);
          .          .         .                  .                 .                 .                  .                 .                 .            
         20  (0.0%)  0         0                  8  (0.0%)         3  (0.0%)         1  (0.0%)          0                 0                 0            if(base_sec == 0 && base_usec == 0)
          .          .         .                  .                 .                 .                  .                 .                 .              {
          2  (0.0%)  0         0                  1  (0.0%)         0                 0                  1  (0.0%)         0                 0                base_sec = tm.tv_sec;
          2  (0.0%)  0         0                  1  (0.0%)         0                 0                  1  (0.0%)         0                 0                base_usec = tm.tv_usec;
          1  (0.0%)  0         0                  0                 0                 0                  0                 0                 0                t = 0.0;
          .          .         .                  .                 .                 .                  .                 .                 .            } else {
         15  (0.0%)  0         0                  3  (0.0%)         0                 0                  0                 0                 0              t = (double) (tm.tv_sec-base_sec) + 
         15  (0.0%)  1 (0.0%)  1 (0.0%)           6  (0.0%)         2  (0.0%)         2  (0.0%)          0                 0                 0                ((double) (tm.tv_usec-base_usec))/1.0e6 ;
          .          .         .                  .                 .                 .                  .                 .                 .            }
          .          .         .                  .                 .                 .                  .                 .                 .          
          .          .         .                  .                 .                 .                  .                 .                 .            return t ;
          8  (0.0%)  0         0                  4  (0.0%)         0                 0                  0                 0                 0          }
          .          .         .                  .                 .                 .                  .                 .                 .          

--------------------------------------------------------------------------------
-- Annotation summary
--------------------------------------------------------------------------------
Ir____________________ I1mr_________ ILmr_________ Dr____________________ D1mr_______________ DLmr_______________ Dw________________ D1mw_______________ DLmw______________ 

3,477,056,121 (100.0%)   127  (5.5%)   127  (5.7%) 2,230,549,315 (100.0%) 63,417,338 (100.0%) 44,563,633 (100.0%) 82,859,371 (99.9%) 10,277,782 (100.0%) 9,420,023 (100.0%)    annotated: files known & above threshold & readable, line numbers known
            0              0             0                     0                   0                   0                   0                  0                  0             annotated: files known & above threshold & readable, line numbers unknown
            0              0             0                     0                   0                   0                   0                  0                  0           unannotated: files known & above threshold & two or more non-identical
            0              0             0                     0                   0                   0                   0                  0                  0           unannotated: files known & above threshold & unreadable 
      488,208   (0.0%) 1,120 (48.7%) 1,063 (47.9%)       119,764   (0.0%)      3,201   (0.0%)      2,527   (0.0%)     42,704  (0.1%)      1,024   (0.0%)       949   (0.0%)  unannotated: files known & below threshold
      183,281   (0.0%) 1,051 (45.7%) 1,029 (46.4%)        40,129   (0.0%)      1,707   (0.0%)      1,142   (0.0%)     11,164  (0.0%)        170   (0.0%)       135   (0.0%)  unannotated: files unknown

