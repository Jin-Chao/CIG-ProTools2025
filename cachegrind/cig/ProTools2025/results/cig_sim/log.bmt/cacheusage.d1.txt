--------------------------------------------------------------------------------
-- Metadata
--------------------------------------------------------------------------------
Invocation:       /home/uqcjin/bin/valgrind/bin/cu_annotate cacheusage.d1.out.41769
I1 cache:         32768 B, 64 B, 8-way associative
D1 cache:         49152 B, 64 B, 12-way associative
LL cache:         62914560 B, 64 B, 15-way associative
WordSize:         4
Command:          ./Himeno/bin/bmt.O3 -s M -l 10 -v varinfo.txt
Histogram bins recorded:  Access# Miss# Comp# Conf# Cap# Cacheline# 1-words 2-words 3-words 4-words 5-words 6-words 7-words 8-words 9-words 10-words 11-words 12-words 13-words 14-words 15-words 16-words
Bins shown:     Access# Miss# Comp# Conf# Cap# Cacheline# 1-words 2-words 3-words 4-words 5-words 6-words 7-words 8-words 9-words 10-words 11-words 12-words 13-words 14-words 15-words 16-words
Bin sort order: Access# Miss# Comp# Conf# Cap# Cacheline# 1-words 2-words 3-words 4-words 5-words 6-words 7-words 8-words 9-words 10-words 11-words 12-words 13-words 14-words 15-words 16-words
Threshold:        0.1%
Annotation:       on

--------------------------------------------------------------------------------
-- Summary
--------------------------------------------------------------------------------
Access#_______ Miss#____ Comp#__ Conf#___ Cap#___ Cacheline# 1-words_ 2-words 3-words_ 4-words 5-words 6-words 7-words 8-words 9-words 10-words 11-words 12-words 13-words 14-words 15-words 16-words 

         36.5% 805,502,069 (100.0%)  (0.5%)  (92.1%)  (7.4%)          2/1  (84.7%)  (0.0%)  (11.4%)  (0.1%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.2%)  (0.0%)  (3.6%)  PROGRAM TOTALS

--------------------------------------------------------------------------------
-- File:function summary
--------------------------------------------------------------------------------
  Access#_______ Miss#____ Comp#__ Conf#___ Cap#___ Cacheline# 1-words_ 2-words 3-words_ 4-words 5-words 6-words 7-words 8-words 9-words 10-words 11-words 12-words 13-words 14-words 15-words 16-words  file:function

<          36.5% 805,496,057 (100.0%)  (0.5%)  (92.1%)  (7.4%)          2/1  (84.7%)  (0.0%)  (11.4%)  (0.1%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.2%)  (0.0%)  (3.6%)  /scratch/user/uqcjin/App/examples/Himeno/src/../../Himeno/src/himenoBMTxpa.c:
           36.6% 801,824,067  (99.5%)  (0.0%)  (92.6%)  (7.4%)          2/1  (85.1%)  (0.0%)  (11.4%)  (0.1%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.2%)  (0.0%)  (3.2%)    jacobi._omp_fn.0
           25.0%   3,409,572   (0.4%)  (100.0%)   (0.0%)  (0.0%)          3/0   (0.0%)  (0.0%)   (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (100.0%)    mat_set


--------------------------------------------------------------------------------
-- Function:file summary
--------------------------------------------------------------------------------
  Access#_______ Miss#___ Comp#__ Conf#___ Cap#___ Cacheline# 1-words_ 2-words 3-words_ 4-words 5-words 6-words 7-words 8-words 9-words 10-words 11-words 12-words 13-words 14-words 15-words 16-words  function:file

>          36.6% 801,824,067 (99.5%)  (0.0%)  (92.6%)  (7.4%)          2/1  (85.1%)  (0.0%)  (11.4%)  (0.1%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.2%)  (0.0%)  (3.2%)  jacobi._omp_fn.0:/scratch/user/uqcjin/App/examples/Himeno/src/../../Himeno/src/himenoBMTxpa.c


>          25.0%   3,409,572  (0.4%)  (100.0%)   (0.0%)  (0.0%)          3/0   (0.0%)  (0.0%)   (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (100.0%)  mat_set:/scratch/user/uqcjin/App/examples/Himeno/src/../../Himeno/src/himenoBMTxpa.c


--------------------------------------------------------------------------------
-- Annotated source file: /scratch/user/uqcjin/App/examples/Himeno/src/../../Himeno/src/himenoBMTxpa.c
--------------------------------------------------------------------------------
Access#_______ Miss#___ Comp#__ Conf#___ Cap#___ Cacheline# 1-words_ 2-words 3-words_ 4-words 5-words 6-words 7-words 8-words 9-words 10-words 11-words 12-words 13-words 14-words 15-words 16-words 

-- line 180 ----------------------------------------
             .           .                                             .                                                                                                                                        varinfo_file_print(getName(p), &MR((&p), 0, 0, 0, 0), &MR((&p), 0, imax-1, jmax-1, kmax-1));
             .           .                                             .                                                                                                                                        varinfo_file_print(getName(wrk1), &MR((&wrk1), 0, 0, 0, 0), &MR((&wrk1), 0, imax-1, jmax-1, kmax-1));
             .           .                                             .                                                                                                                                        varinfo_file_print(getName(wrk2), &MR((&wrk2), 0, 0, 0, 0), &MR((&wrk2), 0, imax-1, jmax-1, kmax-1));
             .           .                                             .                                                                                                                                        varinfo_file_print(getName(bnd), &MR((&bnd), 0, 0, 0, 0), &MR((&bnd), 0, imax-1, jmax-1, kmax-1));
             .           .                                             .                                                                                                                                        varinfo_file_close();
             .           .                                             .                                                                                                                                      }
             .           .                                             .                                                                                                                                     
             .           .                                             .                                                                                                                                      mat_set_init(&p);
         50.0%           1  (0.0%)  (0.0%)   (0.0%)  (100.0%)          2/1  (100.0%)  (0.0%)   (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)    mat_set(&bnd,0,1.0);
             .           .                                             .                                                                                                                                      mat_set(&wrk1,0,0.0);
             .           .                                             .                                                                                                                                      mat_set(&wrk2,0,0.0);
             .           .                                             .                                                                                                                                      mat_set(&a,0,1.0);
             .           .                                             .                                                                                                                                      mat_set(&a,1,1.0);
             .           .                                             .                                                                                                                                      mat_set(&a,2,1.0);
         50.0%           1  (0.0%)  (0.0%)   (0.0%)  (100.0%)          2/1  (100.0%)  (0.0%)   (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)    mat_set(&a,3,1.0/6.0);
             .           .                                             .                                                                                                                                      mat_set(&b,0,0.0);
             .           .                                             .                                                                                                                                      mat_set(&b,1,0.0);
             .           .                                             .                                                                                                                                      mat_set(&b,2,0.0);
             .           .                                             .                                                                                                                                      mat_set(&c,0,1.0);
             .           .                                             .                                                                                                                                      mat_set(&c,1,1.0);
             .           .                                             .                                                                                                                                      mat_set(&c,2,1.0);
             .           .                                             .                                                                                                                                    
             .           .                                             .                                                                                                                                      omp_set_num_threads(num_threads);
-- line 202 ----------------------------------------
-- line 203 ----------------------------------------
             .           .                                             .                                                                                                                                    
             .           .                                             .                                                                                                                                      /*
             .           .                                             .                                                                                                                                       *    Start measuring
             .           .                                             .                                                                                                                                       */
             .           .                                             .                                                                                                                                      nn= 3;
             .           .                                             .                                                                                                                                      printf(" Start rehearsal measurement process.\n");
             .           .                                             .                                                                                                                                      printf(" Measure the performance in %d times.\n\n",nn);
             .           .                                             .                                                                                                                                    
         50.0%           1  (0.0%)  (0.0%)   (0.0%)  (100.0%)          2/2   (0.0%)  (100.0%)   (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)    cpu0= second();
         25.0%           1  (0.0%)  (0.0%)   (0.0%)  (100.0%)          4/5   (0.0%)  (0.0%)   (0.0%)  (0.0%)  (100.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)    gosa= jacobi(nn,&a,&b,&c,&p,&bnd,&wrk1,&wrk2);
             .           .                                             .                                                                                                                                      cpu1= second();
             .           .                                             .                                                                                                                                      cpu= cpu1 - cpu0;
             .           .                                             .                                                                                                                                      flop = (double)(kmax-1)*(double)(jmax-1)*(double)(imax-1)*34.0;
             .           .                                             .                                                                                                                                    
             .           .                                             .                                                                                                                                      if(cpu != 0.0)
             .           .                                             .                                                                                                                                        xmflops2= flop/cpu*1.e-6*nn;
             .           .                                             .                                                                                                                                    
             .           .                                             .                                                                                                                                      printf(" MFLOPS: %f time(s): %f %e\n\n",xmflops2,cpu,gosa);
-- line 220 ----------------------------------------
-- line 266 ----------------------------------------
             .           .                                             .                                                                                                                                        return true;
             .           .                                             .                                                                                                                                      }
             .           .                                             .                                                                                                                                      if(!strcmp(size,"S") || !strcmp(size,"s")){
             .           .                                             .                                                                                                                                        is[0]= 64;
             .           .                                             .                                                                                                                                        is[1]= 64;
             .           .                                             .                                                                                                                                        is[2]= 128;
             .           .                                             .                                                                                                                                        return true;
             .           .                                             .                                                                                                                                      }
         50.0%           1  (0.0%)  (100.0%)   (0.0%)  (0.0%)          2/2   (0.0%)  (100.0%)   (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)    if(!strcmp(size,"M") || !strcmp(size,"m")){
             .           .                                             .                                                                                                                                        is[0]= 128;
             .           .                                             .                                                                                                                                        is[1]= 128;
             .           .                                             .                                                                                                                                        is[2]= 256;
             .           .                                             .                                                                                                                                        return true;
             .           .                                             .                                                                                                                                      }
             .           .                                             .                                                                                                                                      if(!strcmp(size,"L") || !strcmp(size,"l")){
             .           .                                             .                                                                                                                                        is[0]= 256;
             .           .                                             .                                                                                                                                        is[1]= 256;
-- line 282 ----------------------------------------
-- line 290 ----------------------------------------
             .           .                                             .                                                                                                                                        return true;
             .           .                                             .                                                                                                                                      }
             .           .                                             .                                                                                                                                      return false;
             .           .                                             .                                                                                                                                    }
             .           .                                             .                                                                                                                                    
             .           .                                             .                                                                                                                                    int
             .           .                                             .                                                                                                                                    newMat(Matrix* Mat, int mnums,int mrows, int mcols, int mdeps)
             .           .                                             .                                                                                                                                    {
         42.9%           3  (0.0%)  (66.7%)   (0.0%)  (33.3%)          2/0   (0.0%)  (0.0%)   (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (66.7%)  (0.0%)  (33.3%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)    Mat->mnums= mnums;
             .           .                                             .                                                                                                                                      Mat->mrows= mrows;
         14.3%           1  (0.0%)  (100.0%)   (0.0%)  (0.0%)          7/0   (0.0%)  (0.0%)   (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (100.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)    Mat->mcols= mcols;
             .           .                                             .                                                                                                                                      Mat->mdeps= mdeps;
             .           .                                             .                                                                                                                                      Mat->m= NULL;
             .           .                                             .                                                                                                                                      Mat->m= (float*) 
             .           .                                             .                                                                                                                                        malloc(mnums * mrows * mcols * mdeps * sizeof(float));
             .           .                                             .                                                                                                                                      
             .           .                                             .                                                                                                                                      return(Mat->m != NULL) ? 1:0;
             .           .                                             .                                                                                                                                    }
             .           .                                             .                                                                                                                                    
-- line 308 ----------------------------------------
-- line 318 ----------------------------------------
             .           .                                             .                                                                                                                                      Mat->mdeps= 0;
             .           .                                             .                                                                                                                                    }
             .           .                                             .                                                                                                                                    
             .           .                                             .                                                                                                                                    void
             .           .                                             .                                                                                                                                    mat_set(Matrix* Mat, int l, float val)
             .           .                                             .                                                                                                                                    {
             .           .                                             .                                                                                                                                      int i,j,k;
             .           .                                             .                                                                                                                                    
        100.0%       1,677  (0.0%)  (0.0%)   (0.0%)  (100.0%)          1/1  (99.2%)  (0.0%)   (0.2%)  (0.0%)  (0.5%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.1%)      for(i=0; i<Mat->mrows; i++)
          0.2%           4  (0.0%)  (0.0%)   (0.0%)  (100.0%)        422/2   (0.0%)  (100.0%)   (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)        for(j=0; j<Mat->mcols; j++)
             .           .                                             .                                                                                                                                            for(k=0; k<Mat->mdeps; k++)
         25.0%   3,407,878  (0.4%)  (100.0%)   (0.0%)  (0.0%)          3/0   (0.0%)  (0.0%)   (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (100.0%)            MR(Mat,l,i,j,k)= val;
         14.3%          13  (0.0%)  (0.0%)   (0.0%)  (100.0%)          7/0   (0.0%)  (0.0%)   (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (92.3%)  (0.0%)  (7.7%)  }
             .           .                                             .                                                                                                                                    
             .           .                                             .                                                                                                                                    void
             .           .                                             .                                                                                                                                    mat_set_init(Matrix* Mat)
             .           .                                             .                                                                                                                                    {
             .           .                                             .                                                                                                                                      int  i,j,k,l;
             .           .                                             .                                                                                                                                      float tt;
             .           .                                             .                                                                                                                                    
             .           .                                             .                                                                                                                                      for(i=0; i<Mat->mrows; i++)
         99.2%         128  (0.0%)  (0.0%)   (0.0%)  (100.0%)          1/3   (0.0%)  (0.8%)   (0.0%)  (99.2%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)      for(j=0; j<Mat->mcols; j++)
             .           .                                             .                                                                                                                                          for(k=0; k<Mat->mdeps; k++)
         25.0%     262,271  (0.0%)  (100.0%)   (0.0%)  (0.0%)          3/0   (0.0%)  (0.0%)   (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (100.0%)          MR(Mat,0,i,j,k)= (float)(i*i)
             .           .                                             .                                                                                                                                              /(float)((Mat->mrows - 1)*(Mat->mrows - 1));
         14.3%           1  (0.0%)  (0.0%)   (0.0%)  (100.0%)          7/0   (0.0%)  (0.0%)   (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (100.0%)  (0.0%)  (0.0%)  }
             .           .                                             .                                                                                                                                    
             .           .                                             .                                                                                                                                    float
             .           .                                             .                                                                                                                                    jacobi(int nn, Matrix* a,Matrix* b,Matrix* c,
             .           .                                             .                                                                                                                                           Matrix* p,Matrix* bnd,Matrix* wrk1,Matrix* wrk2)
             .           .                                             .                                                                                                                                    {
             .           .                                             .                                                                                                                                      int    i,j,k,n,imax,jmax,kmax;
             .           .                                             .                                                                                                                                      float  gosa,gosa1,s0,ss;
             .           .                                             .                                                                                                                                    
        100.0%           2  (0.0%)  (0.0%)   (0.0%)  (100.0%)          1/0   (0.0%)  (0.0%)   (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (100.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)    imax= p->mrows-1;
        100.0%           2  (0.0%)  (0.0%)   (0.0%)  (100.0%)          1/0   (0.0%)  (0.0%)   (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (100.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)    jmax= p->mcols-1;
             .           .                                             .                                                                                                                                      kmax= p->mdeps-1;
          6.2%           4  (0.0%)  (0.0%)   (0.0%)  (200.0%)         32/0   (0.0%)  (0.0%)   (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (100.0%)  #pragma omp parallel shared(a,p,b,c,bnd,wrk1,wrk2,nn,imax,jmax,kmax,omega,gosa) private(i,j,k,s0,ss,gosa1,n)
             .           .                                             .                                                                                                                                    {
             .           .                                             .                                                                                                                                      for(n=0 ; n<nn ; n++){
             .           .                                             .                                                                                                                                    #pragma omp barrier
             .           .                                             .                                                                                                                                    #pragma omp master
             .           .                                             .                                                                                                                                        {
             .           .                                             .                                                                                                                                          gosa = 0.0;
             .           .                                             .                                                                                                                                        }
         42.3%          11  (0.0%)  (0.0%)   (0.0%)  (100.0%)          2/6   (0.0%)  (0.0%)   (0.0%)  (0.0%)  (0.0%)  (100.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)      gosa1= 0.0;
             .           .                                             .                                                                                                                                    #pragma omp for nowait
             .           .                                             .                                                                                                                                        for(i=1 ; i<imax; i++)
         17.4%     109,744  (0.0%)  (0.0%)  (98.5%)  (1.5%)          5/0   (0.0%)  (0.0%)   (0.0%)  (0.0%)  (1.5%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (1.5%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (95.5%)  (1.5%)        for(j=1 ; j<jmax ; j++)
          0.0%       1,682  (0.0%)  (0.0%)  (96.6%)  (3.4%)     31,208/0   (0.0%)  (0.0%)   (0.0%)  (0.0%)  (0.0%)  (0.8%)  (0.7%)  (0.7%)  (0.0%)  (0.7%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (97.3%)          for(k=1 ; k<kmax ; k++){
         73.5% 154,905,660 (19.2%)  (0.0%)  (95.7%)  (4.3%)          1/1  (67.7%)  (0.0%)  (29.6%)  (0.5%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.1%)  (0.0%)  (2.0%)            s0= MR(a,0,i,j,k)*MR(p,0,i+1,j,  k)
         49.6%  52,525,746  (6.5%)  (0.0%)  (93.7%)  (6.3%)          2/0  (99.9%)  (0.0%)   (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.1%)              + MR(a,1,i,j,k)*MR(p,0,i,  j+1,k)
         49.7%  52,447,122  (6.5%)  (0.0%)  (93.7%)  (6.3%)          2/1  (100.0%)  (0.0%)   (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)              + MR(a,2,i,j,k)*MR(p,0,i,  j,  k+1)
             .           .                                             .                                                                                                                                                + MR(b,0,i,j,k)
         21.2%  55,750,981  (6.9%)  (0.0%)  (88.1%)  (11.9%)          4/0  (94.0%)  (0.0%)   (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.4%)  (0.0%)  (5.6%)               *( MR(p,0,i+1,j+1,k) - MR(p,0,i+1,j-1,k)
          1.6%   3,328,429  (0.4%)  (0.0%)   (0.0%)  (100.0%)         63/0   (0.0%)  (0.0%)   (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (6.2%)  (0.0%)  (93.7%)                - MR(p,0,i-1,j+1,k) + MR(p,0,i-1,j-1,k) )
          3.1%      50,778  (0.0%)  (0.0%)  (100.0%)  (0.0%)         32/1   (0.0%)  (96.8%)   (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (3.2%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)              + MR(b,1,i,j,k)
         26.6%  55,749,343  (6.9%)  (0.0%)  (88.1%)  (11.9%)          3/0  (94.0%)  (0.0%)   (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (6.0%)               *( MR(p,0,i,j+1,k+1) - MR(p,0,i,j-1,k+1)
             .           .                                             .                                                                                                                                                  - MR(p,0,i,j+1,k-1) + MR(p,0,i,j-1,k-1) )
             .           .                                             .                                                                                                                                                + MR(b,2,i,j,k)
         46.8%  98,289,828 (12.2%)  (0.0%)  (96.6%)  (3.4%)          2/1  (53.3%)  (0.0%)  (46.6%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)               *( MR(p,0,i+1,j,k+1) - MR(p,0,i-1,j,k+1)
          3.1%   3,302,208  (0.4%)  (0.0%)  (100.0%)  (0.0%)         31/0   (0.0%)  (0.7%)   (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (6.2%)  (0.0%)  (93.0%)                - MR(p,0,i+1,j,k-1) + MR(p,0,i-1,j,k-1) )
         49.3%  52,422,552  (6.5%)  (0.0%)  (93.7%)  (6.3%)          2/1  (100.0%)  (0.0%)   (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)              + MR(c,0,i,j,k) * MR(p,0,i-1,j,  k)
         49.2%  52,422,552  (6.5%)  (0.0%)  (93.7%)  (6.3%)          2/1  (100.0%)  (0.0%)   (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)              + MR(c,1,i,j,k) * MR(p,0,i,  j-1,k)
         49.7%  52,422,552  (6.5%)  (0.0%)  (93.7%)  (6.3%)          2/1  (100.0%)  (0.0%)   (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)              + MR(c,2,i,j,k) * MR(p,0,i,  j,  k-1)
          4.9%      50,778  (0.0%)  (0.0%)  (100.0%)  (0.0%)         20/2   (0.0%)  (96.8%)   (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (3.2%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)              + MR(wrk1,0,i,j,k);
             .           .                                             .                                                                                                                                    
         51.1% 108,148,950 (13.4%)  (0.0%)  (93.9%)  (6.1%)          1/0  (96.9%)  (0.0%)   (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (3.1%)            ss= (s0*MR(a,3,i,j,k) - MR(p,0,i,j,k))*MR(bnd,0,i,j,k);
             .           .                                             .                                                                                                                                    
             .           .                                             .                                                                                                                                              gosa1+= ss*ss;
             .           .                                             .                                                                                                                                    
         33.6%  53,285,791  (6.6%)  (0.0%)  (93.8%)  (6.2%)          2/1  (100.0%)  (0.0%)   (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)            MR(wrk2,0,i,j,k)= MR(p,0,i,j,k) + omega*ss;
             .           .                                             .                                                                                                                                            }
             .           .                                             .                                                                                                                                    #pragma omp barrier
             .           .                                             .                                                                                                                                    #pragma omp for nowait
             .           .                                             .                                                                                                                                        for(i=1 ; i<imax ; i++)
          0.8%       1,638  (0.0%)  (0.0%)   (0.0%)  (100.1%)        128/3   (0.0%)  (0.0%)   (0.0%)  (99.3%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.7%)        for(j=1 ; j<jmax ; j++)
             .           .                                             .                                                                                                                                            for(k=1 ; k<kmax ; k++)
         23.9%   6,607,705  (0.8%)  (0.0%)   (0.0%)  (100.0%)          4/0   (0.0%)  (0.0%)   (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (6.2%)  (0.0%)  (93.7%)            MR(p,0,i,j,k)= MR(wrk2,0,i,j,k);
             .           .                                             .                                                                                                                                    
             .           .                                             .                                                                                                                                    #pragma omp critical
             .           .                                             .                                                                                                                                        {
         33.3%          13  (0.0%)  (0.0%)   (0.0%)  (108.3%)          3/0  (91.7%)  (0.0%)   (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (8.3%)        gosa+= gosa1;
             .           .                                             .                                                                                                                                        }
             .           .                                             .                                                                                                                                      } /* end n loop */
             .           .                                             .                                                                                                                                    }
             .           .                                             .                                                                                                                                      return(gosa);
             .           .                                             .                                                                                                                                    }
             .           .                                             .                                                                                                                                    
             .           .                                             .                                                                                                                                    double
             .           .                                             .                                                                                                                                    second()
-- line 408 ----------------------------------------
-- line 410 ----------------------------------------
             .           .                                             .                                                                                                                                    
             .           .                                             .                                                                                                                                      struct timeval tm;
             .           .                                             .                                                                                                                                      double t ;
             .           .                                             .                                                                                                                                    
             .           .                                             .                                                                                                                                      static int base_sec = 0,base_usec = 0;
             .           .                                             .                                                                                                                                    
             .           .                                             .                                                                                                                                      gettimeofday(&tm, NULL);
             .           .                                             .                                                                                                                                      
         37.5%           3  (0.0%)  (0.0%)   (0.0%)  (150.0%)          4/0   (0.0%)  (0.0%)   (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (100.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)    if(base_sec == 0 && base_usec == 0)
             .           .                                             .                                                                                                                                        {
             .           .                                             .                                                                                                                                          base_sec = tm.tv_sec;
             .           .                                             .                                                                                                                                          base_usec = tm.tv_usec;
             .           .                                             .                                                                                                                                          t = 0.0;
             .           .                                             .                                                                                                                                      } else {
             .           .                                             .                                                                                                                                        t = (double) (tm.tv_sec-base_sec) + 
         33.3%           2  (0.0%)  (0.0%)   (0.0%)  (200.0%)          6/8   (0.0%)  (0.0%)   (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (100.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)        ((double) (tm.tv_usec-base_usec))/1.0e6 ;
             .           .                                             .                                                                                                                                      }
             .           .                                             .                                                                                                                                    
             .           .                                             .                                                                                                                                      return t ;
             .           .                                             .                                                                                                                                    }
             .           .                                             .                                                                                                                                    

--------------------------------------------------------------------------------
-- Annotation summary
--------------------------------------------------------------------------------
Access#_______ Miss#____ Comp#__ Conf#___ Cap#___ Cacheline# 1-words_ 2-words 3-words_ 4-words 5-words 6-words 7-words 8-words 9-words 10-words 11-words 12-words 13-words 14-words 15-words 16-words 

         36.5% 805,496,057 (100.0%)  (0.5%)  (92.1%)  (7.4%)          2/1  (84.7%)  (0.0%)  (11.4%)  (0.1%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.2%)  (0.0%)  (3.6%)    annotated: files known & above threshold & readable, line numbers known
             0           0   (0.0%)  (0.0%)   (0.0%)  (0.0%)            0   (0.0%)  (0.0%)   (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)    annotated: files known & above threshold & readable, line numbers unknown
             0           0   (0.0%)  (0.0%)   (0.0%)  (0.0%)            0   (0.0%)  (0.0%)   (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  unannotated: files known & above threshold & two or more non-identical
             0           0   (0.0%)  (0.0%)   (0.0%)  (0.0%)            0   (0.0%)  (0.0%)   (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  (0.0%)  unannotated: files known & above threshold & unreadable 
          5.2%       4,171   (0.0%)  (72.0%)   (1.3%)  (27.7%)         19/1   (8.9%)  (14.2%)   (5.1%)  (12.7%)  (3.1%)  (4.8%)  (1.6%)  (4.6%)  (0.9%)  (3.9%)  (1.0%)  (3.4%)  (10.2%)  (7.1%)  (0.9%)  (17.6%)  unannotated: files known & below threshold
          3.8%       1,841   (0.0%)  (41.8%)   (0.5%)  (35.9%)         20/2   (2.1%)  (6.6%)   (3.7%)  (24.7%)  (1.0%)  (2.2%)  (3.9%)  (5.1%)  (10.7%)  (6.0%)  (10.2%)  (3.9%)  (2.9%)  (3.1%)  (0.8%)  (13.0%)  unannotated: files unknown

